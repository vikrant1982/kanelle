require.config({"config": {
        "jsbuild":{"Magento_Ui/js/grid/columns/column.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    'uiRegistry',\n    'mageUtils',\n    'uiElement'\n], function (_, registry, utils, Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            headerTmpl: 'ui/grid/columns/text',\n            bodyTmpl: 'ui/grid/cells/text',\n            disableAction: false,\n            controlVisibility: true,\n            sortable: true,\n            sorting: false,\n            visible: true,\n            draggable: true,\n            fieldClass: {},\n            ignoreTmpls: {\n                fieldAction: true\n            },\n            statefull: {\n                visible: true,\n                sorting: true\n            },\n            imports: {\n                exportSorting: 'sorting'\n            },\n            listens: {\n                '${ $.provider }:params.sorting.field': 'onSortChange'\n            },\n            modules: {\n                source: '${ $.provider }'\n            }\n        },\n\n        /**\n         * Initializes column component.\n         *\n         * @returns {Column} Chainable.\n         */\n        initialize: function () {\n            this._super()\n                .initFieldClass();\n\n            return this;\n        },\n\n        /**\n         * Initializes observable properties.\n         *\n         * @returns {Column} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .track([\n                    'visible',\n                    'sorting',\n                    'disableAction'\n                ])\n                .observe([\n                    'dragging'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Extends list of field classes.\n         *\n         * @returns {Column} Chainable.\n         */\n        initFieldClass: function () {\n            _.extend(this.fieldClass, {\n                _dragging: this.dragging\n            });\n\n            return this;\n        },\n\n        /**\n         * Applies specified stored state of a column or one of its' properties.\n         *\n         * @param {String} state - Defines what state should be used: saved or default.\n         * @param {String} [property] - Defines what columns' property should be applied.\n         *      If not specified, then all columns stored properties will be used.\n         * @returns {Column} Chainable.\n         */\n        applyState: function (state, property) {\n            var namespace = this.storageConfig.root;\n\n            if (property) {\n                namespace += '.' + property;\n            }\n\n            this.storage('applyStateOf', state, namespace);\n\n            return this;\n        },\n\n        /**\n         * Sets columns' sorting. If column is currently sorted,\n         * than its' direction will be toggled.\n         *\n         * @param {*} [enable=true] - If false, than sorting will\n         *      be removed from a column.\n         * @returns {Column} Chainable.\n         */\n        sort: function (enable) {\n            if (!this.sortable) {\n                return this;\n            }\n\n            enable !== false ?\n                this.toggleSorting() :\n                this.sorting = false;\n\n            return this;\n        },\n\n        /**\n         * Sets descending columns' sorting.\n         *\n         * @returns {Column} Chainable.\n         */\n        sortDescending: function () {\n            if (this.sortable) {\n                this.sorting = 'desc';\n            }\n\n            return this;\n        },\n\n        /**\n         * Sets ascending columns' sorting.\n         *\n         * @returns {Column} Chainable.\n         */\n        sortAscending: function () {\n            if (this.sortable) {\n                this.sorting = 'asc';\n            }\n\n            return this;\n        },\n\n        /**\n         * Toggles sorting direction.\n         *\n         * @returns {Column} Chainable.\n         */\n        toggleSorting: function () {\n            this.sorting === 'asc' ?\n                this.sortDescending() :\n                this.sortAscending();\n\n            return this;\n        },\n\n        /**\n         * Checks if column is sorted.\n         *\n         * @returns {Boolean}\n         */\n        isSorted: function () {\n            return !!this.sorting;\n        },\n\n        /**\n         * Exports sorting data to the dataProvider if\n         * sorting of a column is enabled.\n         */\n        exportSorting: function () {\n            if (!this.sorting) {\n                return;\n            }\n\n            this.source('set', 'params.sorting', {\n                field: this.index,\n                direction: this.sorting\n            });\n        },\n\n        /**\n         * Checks if column has an assigned action that will\n         * be performed when clicking on one of its' fields.\n         *\n         * @returns {Boolean}\n         */\n        hasFieldAction: function () {\n            return !!this.fieldAction || !!this.fieldActions;\n        },\n\n        /**\n         * Applies action described in a 'fieldAction' property\n         * or actions described in 'fieldActions' property.\n         *\n         * @param {Number} rowIndex - Index of a row which initiates action.\n         * @returns {Column} Chainable.\n         *\n         * @example Example of fieldAction definition, which is equivalent to\n         *      referencing to external component named 'listing.multiselect'\n         *      and calling its' method 'toggleSelect' with params [rowIndex, true] =>\n         *\n         *      {\n         *          provider: 'listing.multiselect',\n         *          target: 'toggleSelect',\n         *          params: ['${ $.$data.rowIndex }', true]\n         *      }\n         */\n        applyFieldAction: function (rowIndex) {\n            if (!this.hasFieldAction() || this.disableAction) {\n                return this;\n            }\n\n            if (this.fieldActions) {\n                this.fieldActions.forEach(this.applySingleAction.bind(this, rowIndex), this);\n            } else {\n                this.applySingleAction(rowIndex);\n            }\n\n            return this;\n        },\n\n        /**\n         * Applies single action\n         *\n         * @param {Number} rowIndex - Index of a row which initiates action.\n         * @param {Object} action - Action (fieldAction) to be applied\n         *\n         */\n        applySingleAction: function (rowIndex, action) {\n            var callback;\n\n            action = action || this.fieldAction;\n            action = utils.template(action, {\n                column: this,\n                rowIndex: rowIndex\n            }, true);\n\n            callback = this._getFieldCallback(action);\n\n            if (_.isFunction(callback)) {\n                callback();\n            }\n        },\n\n        /**\n         * Returns field action handler if it was specified.\n         *\n         * @param {Object} record - Record object with which action is associated.\n         * @returns {Function|Undefined}\n         */\n        getFieldHandler: function (record) {\n            if (this.hasFieldAction()) {\n                return this.applyFieldAction.bind(this, record._rowIndex);\n            }\n        },\n\n        /**\n         * Creates action callback based on its' data.\n         *\n         * @param {Object} action - Actions' object.\n         * @returns {Function|Boolean} Callback function or false\n         *      value if it was impossible create a callback.\n         */\n        _getFieldCallback: function (action) {\n            var args     = action.params || [],\n                callback = action.target;\n\n            if (action.provider && action.target) {\n                args.unshift(action.target);\n\n                callback = registry.async(action.provider);\n            }\n\n            if (!_.isFunction(callback)) {\n                return false;\n            }\n\n            return function () {\n                callback.apply(callback, args);\n            };\n        },\n\n        /**\n         * Ment to preprocess data associated with a current columns' field.\n         *\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {String}\n         */\n        getLabel: function (record) {\n            return record[this.index];\n        },\n\n        /**\n         * Returns list of classes that should be applied to a field.\n         *\n         * @returns {Object}\n         */\n        getFieldClass: function () {\n            return this.fieldClass;\n        },\n\n        /**\n         * Returns path to the columns' header template.\n         *\n         * @returns {String}\n         */\n        getHeader: function () {\n            return this.headerTmpl;\n        },\n\n        /**\n         * Returns path to the columns' body template.\n         *\n         * @returns {String}\n         */\n        getBody: function () {\n            return this.bodyTmpl;\n        },\n\n        /**\n         * Listener of the providers' sorting state changes.\n         *\n         * @param {Srting} field - Field by which current sorting is performed.\n         */\n        onSortChange: function (field) {\n            if (field !== this.index) {\n                this.sort(false);\n            }\n        }\n    });\n});\n","Magento_Ui/js/grid/columns/thumbnail.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    './column',\n    'jquery',\n    'mage/template',\n    'text!Magento_Ui/templates/grid/cells/thumbnail/preview.html',\n    'underscore',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function (Column, $, mageTemplate, thumbnailPreviewTemplate, _) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'ui/grid/cells/thumbnail',\n            fieldClass: {\n                'data-grid-thumbnail-cell': true\n            }\n        },\n\n        /**\n         * Get image source data per row.\n         *\n         * @param {Object} row\n         * @returns {String}\n         */\n        getSrc: function (row) {\n            return row[this.index + '_src'];\n        },\n\n        /**\n         * Get original image source data per row.\n         *\n         * @param {Object} row\n         * @returns {String}\n         */\n        getOrigSrc: function (row) {\n            return row[this.index + '_orig_src'];\n        },\n\n        /**\n         * Get link data per row.\n         *\n         * @param {Object} row\n         * @returns {String}\n         */\n        getLink: function (row) {\n            return row[this.index + '_link'];\n        },\n\n        /**\n         * Get alternative text data per row.\n         *\n         * @param {Object} row\n         * @returns {String}\n         */\n        getAlt: function (row) {\n            return _.escape(row[this.index + '_alt']);\n        },\n\n        /**\n         * Check if preview available.\n         *\n         * @returns {Boolean}\n         */\n        isPreviewAvailable: function () {\n            return this['has_preview'] || false;\n        },\n\n        /**\n         * Build preview.\n         *\n         * @param {Object} row\n         */\n        preview: function (row) {\n            var modalHtml = mageTemplate(\n                    thumbnailPreviewTemplate,\n                    {\n                        src: this.getOrigSrc(row), alt: this.getAlt(row), link: this.getLink(row),\n                        linkText: $.mage.__('Go to Details Page')\n                    }\n                ),\n                previewPopup = $('<div/>').html(modalHtml);\n\n            previewPopup.modal({\n                title: this.getAlt(row),\n                innerScroll: true,\n                modalClass: '_image-box',\n                buttons: []\n            }).trigger('openModal');\n        },\n\n        /**\n         * Get field handler per row.\n         *\n         * @param {Object} row\n         * @returns {Function}\n         */\n        getFieldHandler: function (row) {\n            if (this.isPreviewAvailable()) {\n                return this.preview.bind(this, row);\n            }\n        }\n    });\n});\n","Magento_Ui/js/grid/columns/link.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    './column',\n    'mageUtils'\n], function (Column, utils) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            link: 'link',\n            bodyTmpl: 'ui/grid/cells/link'\n        },\n\n        /**\n         * Returns link to given record.\n         *\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {String}\n         */\n        getLink: function (record) {\n            return utils.nested(record, this.link);\n        },\n\n        /**\n         * Check if link parameter exist in record.\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {Boolean}\n         */\n        isLink: function (record) {\n            return !!utils.nested(record, this.link);\n        }\n    });\n});\n","Magento_Ui/js/grid/columns/select.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    './column'\n], function (_, Column) {\n    'use strict';\n\n    return Column.extend({\n        /**\n         * Retrieves label associated with a provided value.\n         *\n         * @returns {String}\n         */\n        getLabel: function () {\n            var options = this.options || [],\n                values = this._super(),\n                label = [];\n\n            if (_.isString(values)) {\n                values = values.split(',');\n            }\n\n            if (!_.isArray(values)) {\n                values = [values];\n            }\n\n            values = values.map(function (value) {\n                return value + '';\n            });\n\n            options = this.flatOptions(options);\n\n            options.forEach(function (item) {\n                if (_.contains(values, item.value + '')) {\n                    label.push(item.label);\n                }\n            });\n\n            return label.join(', ');\n        },\n\n        /**\n         * Transformation tree options structure to liner array.\n         *\n         * @param {Array} options\n         * @returns {Array}\n         */\n        flatOptions: function (options) {\n            var self = this;\n\n            if (!_.isArray(options)) {\n                options = _.values(options);\n            }\n\n            return options.reduce(function (opts, option) {\n                if (_.isArray(option.value)) {\n                    opts = opts.concat(self.flatOptions(option.value));\n                } else {\n                    opts.push(option);\n                }\n\n                return opts;\n            }, []);\n        }\n    });\n});\n","Magento_Ui/js/grid/columns/multiselect.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    'mage/translate',\n    './column'\n], function (_, $t, Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            headerTmpl: 'ui/grid/columns/multiselect',\n            bodyTmpl: 'ui/grid/cells/multiselect',\n            controlVisibility: false,\n            sortable: false,\n            draggable: false,\n            menuVisible: false,\n            excludeMode: false,\n            allSelected: false,\n            indetermine: false,\n            preserveSelectionsOnFilter: false,\n            disabled: [],\n            selected: [],\n            excluded: [],\n            fieldClass: {\n                'data-grid-checkbox-cell': true\n            },\n            actions: [{\n                value: 'selectAll',\n                label: $t('Select All')\n            }, {\n                value: 'deselectAll',\n                label: $t('Deselect All')\n            }, {\n                value: 'selectPage',\n                label: $t('Select All on This Page')\n            }, {\n                value: 'deselectPage',\n                label: $t('Deselect All on This Page')\n            }],\n\n            imports: {\n                totalRecords: '${ $.provider }:data.totalRecords',\n                rows: '${ $.provider }:data.items'\n            },\n\n            listens: {\n                '${ $.provider }:params.filters': 'onFilter',\n                selected: 'onSelectedChange',\n                rows: 'onRowsChange'\n            },\n\n            modules: {\n                source: '${ $.provider }'\n            }\n        },\n\n        /**\n         * Initializes observable properties.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'disabled',\n                    'selected',\n                    'excluded',\n                    'excludeMode',\n                    'totalSelected',\n                    'allSelected',\n                    'indetermine',\n                    'totalRecords',\n                    'rows'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Selects specified record.\n         *\n         * @param {*} id - See definition of 'getId' method.\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\n         * @returns {Multiselect} Chainable.\n         */\n        select: function (id, isIndex) {\n            this._setSelection(id, isIndex, true);\n\n            return this;\n        },\n\n        /**\n         * Deselects specified record.\n         *\n         * @param {*} id - See definition of 'getId' method.\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\n         * @returns {Multiselect} Chainable.\n         */\n        deselect: function (id, isIndex) {\n            this._setSelection(id, isIndex, false);\n\n            return this;\n        },\n\n        /**\n         * Toggles selection of a specified record.\n         *\n         * @param {*} id - See definition of 'getId' method.\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\n         * @returns {Multiselect} Chainable.\n         */\n        toggleSelect: function (id, isIndex) {\n            this._setSelection(id, isIndex, !this.isSelected(id, isIndex));\n\n            return this;\n        },\n\n        /**\n         * Checks if specified record is selected.\n         *\n         * @param {*} id - See definition of 'getId' method.\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\n         * @returns {Boolean}\n         */\n        isSelected: function (id, isIndex) {\n            id = this.getId(id, isIndex);\n\n            return this.selected.contains(id);\n        },\n\n        /**\n         * Selects/deselects specified record base on a 'select' parameter value.\n         *\n         * @param {*} id - See definition of 'getId' method.\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\n         * @param {Boolean} select - Whether to select/deselect record.\n         * @returns {Multiselect} Chainable.\n         */\n        _setSelection: function (id, isIndex, select) {\n            var selected = this.selected;\n\n            id = this.getId(id, isIndex);\n\n            if (!select && this.isSelected(id)) {\n                selected.remove(id);\n            } else if (select) {\n                selected.push(id);\n            }\n\n            return this;\n        },\n\n        /**\n         * Selects all records, even those that\n         * are not visible on the page.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        selectAll: function () {\n            this.excludeMode(true);\n\n            this.clearExcluded()\n                .selectPage();\n\n            return this;\n        },\n\n        /**\n         * Deselects all records.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        deselectAll: function () {\n            this.excludeMode(false);\n\n            this.clearExcluded();\n            this.selected.removeAll();\n\n            return this;\n        },\n\n        /**\n         * Selects or deselects all records.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        toggleSelectAll: function () {\n            this.allSelected() ?\n                this.deselectAll() :\n                this.selectAll();\n\n            return this;\n        },\n\n        /**\n         * Selects all records on the current page.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        selectPage: function () {\n            var selected = _.union(this.selected(), this.getIds());\n\n            selected = _.difference(selected, this.disabled());\n\n            this.selected(selected);\n\n            return this;\n        },\n\n        /**\n         * Deselects all records on the current page.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        deselectPage: function () {\n            var pageIds = this.getIds();\n\n            this.selected.remove(function (value) {\n                return !!~pageIds.indexOf(value);\n            });\n\n            return this;\n        },\n\n        /**\n        * Selects or deselects all records on the current page.\n        *\n        * @returns {Multiselect} Chainable.\n        */\n        togglePage: function () {\n            return this.isPageSelected() ? this.deselectPage() : this.selectPage();\n        },\n\n        /**\n         * Clears the array of not selected records.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        clearExcluded: function () {\n            this.excluded.removeAll();\n\n            return this;\n        },\n\n        /**\n         * Retrieve all id's from available records.\n         *\n         * @param {Boolean} [exclude] - Whether to exclude not selected ids' from result.\n         * @returns {Array} An array of ids'.\n         */\n        getIds: function (exclude) {\n            var items = this.rows(),\n                ids = _.pluck(items, this.indexField);\n\n            return exclude ?\n                _.difference(ids, this.excluded()) :\n                ids;\n        },\n\n        /**\n         * Returns identifier of a record.\n         *\n         * @param {*} id - Id of a record or its' index in a rows array.\n         * @param {Boolean} [isIndex=false] - Flag that specifies with what\n         *      kind of identifier we are dealing with.\n         * @returns {*}\n         */\n        getId: function (id, isIndex) {\n            var record = this.rows()[id];\n\n            if (isIndex && record) {\n                id = record[this.indexField];\n            }\n\n            return id;\n        },\n\n        /**\n         * Recalculates list of the excluded records.\n         * Changes value of `excluded`.\n         *\n         * @param {Array} selected - List of the currently selected records.\n         * @returns {Multiselect} Chainable.\n         */\n        updateExcluded: function (selected) {\n            var excluded = this.excluded(),\n                fromPage = _.difference(this.getIds(), selected);\n\n            excluded = _.union(excluded, fromPage);\n            excluded = _.difference(excluded, selected);\n\n            this.excluded(excluded);\n\n            return this;\n        },\n\n        /**\n         * Calculates number of selected records and\n         * updates 'totalSelected' property.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        countSelected: function () {\n            var total = this.totalRecords(),\n                excluded = this.excluded().length,\n                selected = this.selected().length;\n\n            if (this.excludeMode()) {\n                selected = total - excluded;\n            }\n\n            this.totalSelected(selected);\n\n            return this;\n        },\n\n        /**\n         * Returns selected items on a current page.\n         *\n         * @returns {Array}\n         */\n        getPageSelections: function () {\n            var ids = this.getIds();\n\n            return this.selected.filter(function (id) {\n                return _.contains(ids, id);\n            });\n        },\n\n        /**\n         * Returns selections data.\n         *\n         * @returns {Object}\n         */\n        getSelections: function () {\n            return {\n                excluded: this.excluded(),\n                selected: this.selected(),\n                total: this.totalSelected(),\n                excludeMode: this.excludeMode(),\n                params: this.getFiltering()\n            };\n        },\n\n        /**\n         * Extracts filtering data from data provider.\n         *\n         * @returns {Object} Current filters state.\n         */\n        getFiltering: function () {\n            var source = this.source(),\n                keys = ['filters', 'search', 'namespace'];\n\n            if (!source) {\n                return {};\n            }\n\n            return _.pick(source.get('params'), keys);\n        },\n\n        /**\n         * Defines if provided select/deselect actions is relevant.\n         * E.g. there is no need in a 'select page' action if only one\n         * page is available.\n         *\n         * @param {String} actionId - Id of the action to be checked.\n         * @returns {Boolean}\n         */\n        isActionRelevant: function (actionId) {\n            var pageIds         = this.getIds().length,\n                multiplePages   = pageIds < this.totalRecords(),\n                relevant        = true;\n\n            switch (actionId) {\n                case 'selectPage':\n                    relevant = multiplePages && !this.isPageSelected(true);\n                    break;\n\n                case 'deselectPage':\n                    relevant =  multiplePages && this.isPageSelected();\n                    break;\n\n                case 'selectAll':\n                    relevant = !this.allSelected();\n                    break;\n\n                case 'deselectAll':\n                    relevant = this.totalSelected() > 0;\n            }\n\n            return relevant;\n        },\n\n        /**\n         * Checks if current page has selected records.\n         *\n         * @param {Boolean} [all=false] - If set to 'true' checks that every\n         *      record on the page is selected. Otherwise checks that\n         *      page has some selected records.\n         * @returns {Boolean}\n         */\n        isPageSelected: function (all) {\n            var pageIds = this.getIds(),\n                selected = this.selected(),\n                excluded = this.excluded(),\n                iterator = all ? 'every' : 'some';\n\n            if (this.allSelected()) {\n                return true;\n            }\n\n            if (this.excludeMode()) {\n                return pageIds[iterator](function (id) {\n                    return !~excluded.indexOf(id);\n                });\n            }\n\n            return pageIds[iterator](function (id) {\n                return !!~selected.indexOf(id);\n            });\n        },\n\n        /**\n         * Updates values of the 'allSelected'\n         * and 'indetermine' properties.\n         *\n         * @returns {Multiselect} Chainable.\n         */\n        updateState: function () {\n            var selected        = this.selected().length,\n                excluded        = this.excluded().length,\n                totalSelected   = this.totalSelected(),\n                totalRecords    = this.totalRecords(),\n                allSelected     = totalRecords && totalSelected === totalRecords;\n\n            if (this.excludeMode()) {\n                if (excluded === totalRecords && !this.preserveSelectionsOnFilter) {\n                    this.deselectAll();\n                }\n            } else if (totalRecords && selected === totalRecords && !this.preserveSelectionsOnFilter) {\n                this.selectAll();\n            }\n\n            this.allSelected(allSelected);\n            this.indetermine(totalSelected && !allSelected);\n\n            return this;\n        },\n\n        /**\n         * Overrides base method, because this component\n         * can't have global field action.\n         *\n         * @returns {Boolean} False.\n         */\n        hasFieldAction: function () {\n            return false;\n        },\n\n        /**\n         * Callback method to handle changes of selected items.\n         *\n         * @param {Array} selected - An array of currently selected items.\n         */\n        onSelectedChange: function (selected) {\n            this.updateExcluded(selected)\n                .countSelected()\n                .updateState();\n        },\n\n        /**\n         * Is invoked when rows has changed. Recalculates selected items\n         * based on \"selectMode\" property.\n         */\n        onRowsChange: function () {\n            var newSelections;\n\n            if (this.excludeMode()) {\n                newSelections = _.union(this.getIds(true), this.selected());\n\n                this.selected(newSelections);\n            }\n        },\n\n        /**\n         * Is invoked when filtration is applied or removed\n         */\n        onFilter: function () {\n            if (!this.preserveSelectionsOnFilter) {\n                this.deselectAll();\n            }\n        }\n    });\n});\n","Magento_Ui/js/grid/columns/actions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    'mageUtils',\n    'uiRegistry',\n    './column',\n    'Magento_Ui/js/modal/confirm',\n    'mage/dataPost'\n], function (_, utils, registry, Column, confirm, dataPost) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'ui/grid/cells/actions',\n            sortable: false,\n            draggable: false,\n            actions: [],\n            rows: [],\n            rowsProvider: '${ $.parentName }',\n            fieldClass: {\n                'data-grid-actions-cell': true\n            },\n            templates: {\n                actions: {}\n            },\n            imports: {\n                rows: '${ $.rowsProvider }:rows'\n            },\n            listens: {\n                rows: 'updateActions'\n            }\n        },\n\n        /**\n         * Initializes observable properties.\n         *\n         * @returns {ActionsColumn} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .track('actions');\n\n            return this;\n        },\n\n        /**\n         * Returns specific action of a specified row\n         * or all action objects associated with it.\n         *\n         * @param {Number} rowIndex - Index of a row.\n         * @param {String} [actionIndex] - Action identifier.\n         * @returns {Array|Object}\n         */\n        getAction: function (rowIndex, actionIndex) {\n            var rowActions = this.actions[rowIndex];\n\n            return rowActions && actionIndex ?\n                rowActions[actionIndex] :\n                rowActions;\n        },\n\n        /**\n         * Returns visible actions for a specified row.\n         *\n         * @param {Number} rowIndex - Index of a row.\n         * @returns {Array} Visible actions.\n         */\n        getVisibleActions: function (rowIndex) {\n            var rowActions = this.getAction(rowIndex);\n\n            return _.filter(rowActions, this.isActionVisible, this);\n        },\n\n        /**\n         * Adds new action. If an action with the specified identifier\n         * already exists, then the original will be overridden.\n         *\n         * @param {String} index - Actions' identifier.\n         * @param {Object} action - Actions' data.\n         * @returns {ActionsColumn} Chainable.\n         */\n        addAction: function (index, action) {\n            var actionTmpls = this.templates.actions;\n\n            actionTmpls[index] = action;\n\n            this.updateActions();\n\n            return this;\n        },\n\n        /**\n         * Recreates actions for each row.\n         *\n         * @returns {ActionsColumn} Chainable.\n         */\n        updateActions: function () {\n            this.actions = this.rows.map(this._formatActions, this);\n\n            return this;\n        },\n\n        /**\n         * Processes actions, setting additional information to them and\n         * evaluating their properties as string templates.\n         *\n         * @private\n         * @param {Object} row - Row object.\n         * @param {Number} rowIndex - Index of a row.\n         * @returns {Array}\n         */\n        _formatActions: function (row, rowIndex) {\n            var rowActions      = row[this.index] || {},\n                recordId        = row[this.indexField],\n                customActions   = this.templates.actions;\n\n            /**\n             * Actions iterator.\n             */\n            function iterate(action, index) {\n                action = utils.extend({\n                    index: index,\n                    rowIndex: rowIndex,\n                    recordId: recordId\n                }, action);\n\n                return utils.template(action, row, true);\n            }\n\n            rowActions      = _.mapObject(rowActions, iterate);\n            customActions   = _.map(customActions, iterate);\n\n            customActions.forEach(function (action) {\n                rowActions[action.index] = action;\n            });\n\n            return rowActions;\n        },\n\n        /**\n         * Applies specified action.\n         *\n         * @param {String} actionIndex - Actions' identifier.\n         * @param {Number} rowIndex - Index of a row.\n         * @returns {ActionsColumn} Chainable.\n         */\n        applyAction: function (actionIndex, rowIndex) {\n            var action = this.getAction(rowIndex, actionIndex),\n                callback = this._getCallback(action);\n\n            action.confirm ?\n                this._confirm(action, callback) :\n                callback();\n\n            return this;\n        },\n\n        /**\n         * Creates handler for the provided action if it's required.\n         *\n         * @param {Object} action - Action object.\n         * @returns {Function|Undefined}\n         */\n        getActionHandler: function (action) {\n            var index = action.index,\n                rowIndex = action.rowIndex;\n\n            if (this.isHandlerRequired(index, rowIndex)) {\n                return this.applyAction.bind(this, index, rowIndex);\n            }\n        },\n\n        /**\n         * Returns target of action if it's been set.\n         *\n         * @param {Object} action - Action object.\n         * @returns {String}\n         */\n        getTarget: function (action) {\n            if (action.target) {\n                return action.target;\n            }\n\n            return '_self';\n        },\n\n        /**\n         * Checks if specified action requires a handler function.\n         *\n         * @param {String} actionIndex - Actions' identifier.\n         * @param {Number} rowIndex - Index of a row.\n         * @returns {Boolean}\n         */\n        isHandlerRequired: function (actionIndex, rowIndex) {\n            var action = this.getAction(rowIndex, actionIndex);\n\n            return _.isObject(action.callback) || action.confirm || !action.href;\n        },\n\n        /**\n         * Creates action callback based on it's data. If the action doesn't specify\n         * a callback function than the default one will be used.\n         *\n         * @private\n         * @param {Object} action - Action's object.\n         * @returns {Function} Callback function.\n         */\n        _getCallback: function (action) {\n            var args = [action.index, action.recordId, action],\n                callback = action.callback;\n\n            if (utils.isObject(callback)) {\n                args.unshift(callback.target);\n\n                callback = registry.async(callback.provider);\n            } else if (_.isArray(callback)) {\n                return this._getCallbacks(action);\n            } else if (!_.isFunction(callback)) {\n                callback = this.defaultCallback.bind(this);\n            }\n\n            return function () {\n                callback.apply(callback, args);\n            };\n        },\n\n        /**\n         * Creates action callback for multiple actions.\n         *\n         * @private\n         * @param {Object} action - Action's object.\n         * @returns {Function} Callback function.\n         */\n        _getCallbacks: function (action) {\n            var callback = action.callback,\n                callbacks = [],\n                tmpCallback;\n\n            _.each(callback, function (cb) {\n                tmpCallback = {\n                    action: registry.async(cb.provider),\n                    args: _.compact([cb.target, cb.params])\n                };\n                callbacks.push(tmpCallback);\n            });\n\n            return function () {\n                _.each(callbacks, function (cb) {\n                    cb.action.apply(cb.action, cb.args);\n                });\n            };\n        },\n\n        /**\n         * Default action callback. Redirects to\n         * the specified in action's data url.\n         *\n         * @param {String} actionIndex - Action's identifier.\n         * @param {(Number|String)} recordId - Id of the record associated\n         *      with a specified action.\n         * @param {Object} action - Action's data.\n         */\n        defaultCallback: function (actionIndex, recordId, action) {\n            if (action.post) {\n                dataPost().postData({\n                    action: action.href,\n                    data: {}\n                });\n            } else {\n                window.location.href = action.href;\n            }\n        },\n\n        /**\n         * Shows actions' confirmation window.\n         *\n         * @param {Object} action - Action's data.\n         * @param {Function} callback - Callback that will be\n         *      invoked if action is confirmed.\n         */\n        _confirm: function (action, callback) {\n            var confirmData = action.confirm;\n\n            confirm({\n                title: confirmData.title,\n                content: confirmData.message,\n                actions: {\n                    confirm: callback\n                }\n            });\n        },\n\n        /**\n         * Checks if row has only one visible action.\n         *\n         * @param {Number} rowIndex - Row index.\n         * @returns {Boolean}\n         */\n        isSingle: function (rowIndex) {\n            return this.getVisibleActions(rowIndex).length === 1;\n        },\n\n        /**\n         * Checks if row has more than one visible action.\n         *\n         * @param {Number} rowIndex - Row index.\n         * @returns {Boolean}\n         */\n        isMultiple: function (rowIndex) {\n            return this.getVisibleActions(rowIndex).length > 1;\n        },\n\n        /**\n         * Checks if action should be displayed.\n         *\n         * @param {Object} action - Action object.\n         * @returns {Boolean}\n         */\n        isActionVisible: function (action) {\n            return action.hidden !== true;\n        },\n\n        /**\n         * Overrides base method, because this component\n         * can't have global field action.\n         *\n         * @returns {Boolean} False.\n         */\n        hasFieldAction: function () {\n            return false;\n        }\n    });\n});\n","Magento_Ui/js/grid/columns/onoff.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    'mage/translate',\n    './multiselect',\n    'uiRegistry'\n], function (_, $t, Column, registry) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            headerTmpl: 'ui/grid/columns/onoff',\n            bodyTmpl: 'ui/grid/cells/onoff',\n            fieldClass: {\n                'admin__scope-old': true,\n                'data-grid-onoff-cell': true,\n                'data-grid-checkbox-cell': false\n            },\n            imports: {\n                selectedData: '${ $.provider }:data.selectedData'\n            },\n            listens: {\n                '${ $.provider }:reloaded': 'setDefaultSelections'\n            }\n        },\n\n        /**\n         * @param {Number} id\n         * @returns {*}\n         */\n        getLabel: function (id) {\n            return this.selected.indexOf(id) !== -1 ? $t('On') : $t('Off');\n        },\n\n        /**\n         * Sets the ids for preselected elements\n         * @returns void\n         */\n        setDefaultSelections: function () {\n            var positionCacheValid = registry.get('position_cache_valid'),\n                selectedFromCache = registry.get('selected_cache'),\n                key,\n                i;\n\n            if (positionCacheValid && this.selected().length === 0) {\n                // Check selected data\n                selectedFromCache = JSON.parse(selectedFromCache);\n\n                for (i = 0; i < selectedFromCache.length; i++) {\n                    this.selected.push(selectedFromCache[i]);\n                }\n\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify(this.selected()));\n\n                return;\n            }\n\n            if (positionCacheValid && this.selected().length > 0) {\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify(this.selected()));\n\n                return;\n            }\n\n            if (this.selectedData.length === 0) {\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify([]));\n\n                return;\n            }\n\n            // Check selected data\n            for (key in this.selectedData) {\n                if (this.selectedData.hasOwnProperty(key) && this.selected().indexOf(key) === -1) {\n                    this.selected.push(key);\n                }\n            }\n            // Uncheck unselected data\n            for (i = 0; i < this.selected().length; i++) {\n                key = this.selected()[i];\n                this.selectedData.hasOwnProperty(key) || this.selected.splice(this.selected().indexOf(key), 1);\n                this.selectedData.hasOwnProperty(key) || i--;\n            }\n            registry.set('position_cache_valid', true);\n            registry.set('selected_cache', JSON.stringify(this.selected()));\n        },\n\n        /**\n         * Show/hide action in the massaction menu\n         * @param {Number} actionId\n         * @returns {Boolean}\n         */\n        isActionRelevant: function (actionId) {\n            var relevant = true;\n\n            switch (actionId) {\n                case 'selectPage':\n                    relevant = !this.isPageSelected(true);\n                    break;\n\n                case 'deselectPage':\n                    relevant =  this.isPageSelected();\n                    break;\n            }\n\n            return relevant;\n        },\n\n        /**\n         * Updates values of the 'allSelected'\n         * and 'indetermine' properties.\n         *\n         * @returns {Object} Chainable.\n         */\n        updateState: function () {\n            var positionCacheValid = registry.get('position_cache_valid'),\n                totalRecords    = this.totalRecords(),\n                selected        = this.selected().length,\n                excluded        = this.excluded().length,\n                totalSelected   = this.totalSelected(),\n                allSelected;\n\n            if (positionCacheValid && this.selected().length > 0) {\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify(this.selected()));\n            }\n\n            // When filters are enabled then totalRecords is unknown\n            if (this.getFiltering()) {\n                if (this.getFiltering().search !== '') {\n                    totalRecords = -1;\n                }\n            }\n\n            allSelected = totalRecords && totalSelected === totalRecords;\n\n            if (this.excludeMode()) {\n                if (excluded === totalRecords) {\n                    this.deselectAll();\n                }\n            } else if (totalRecords && selected === totalRecords) {\n                this.selectAll();\n            }\n\n            this.allSelected(allSelected);\n            this.indetermine(totalSelected && !allSelected);\n\n            return this;\n        }\n    });\n});\n","Magento_Ui/js/core/app.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    './renderer/types',\n    './renderer/layout',\n    '../lib/knockout/bootstrap'\n], function (types, layout) {\n    'use strict';\n\n    return function (data, merge) {\n        types.set(data.types);\n        layout(data.components, undefined, true, merge);\n    };\n});\n","Magento_Ui/js/core/renderer/types.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'mageUtils'\n], function (_, utils) {\n    'use strict';\n\n    var store = {};\n\n    /**\n     * Flatten a nested data.\n     *\n     * @param {Object} data\n     * @returns {Object}\n     */\n    function flatten(data) {\n        var extender = data.extends || [],\n            result = {};\n\n        extender = utils.stringToArray(extender);\n\n        extender.push(data);\n\n        extender.forEach(function (item) {\n            if (_.isString(item)) {\n                item = store[item] || {};\n            }\n\n            utils.extend(result, item);\n        });\n\n        delete result.extends;\n\n        return result;\n    }\n\n    return {\n        /**\n         * Set types to store object.\n         *\n         * @param {Object} types\n         */\n        set: function (types) {\n            types = types || {};\n\n            utils.extend(store, types);\n\n            _.each(types, function (data, type) {\n                store[type] = flatten(data);\n            });\n        },\n\n        /**\n         * Get type from store object.\n         *\n         * @param {String} type\n         * @returns {*|{}}\n         */\n        get: function (type) {\n            return store[type] || {};\n        }\n    };\n});\n","Magento_Ui/js/core/renderer/layout.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'jquery',\n    'mageUtils',\n    'uiRegistry',\n    './types',\n    '../../lib/logger/console-logger'\n], function (_, $, utils, registry, types, consoleLogger) {\n    'use strict';\n\n    var templates = registry.create(),\n        layout = {},\n        cachedConfig = {};\n\n    /**\n     * Build name from parent name and node name\n     *\n     * @param {Object} parent\n     * @param {Object} node\n     * @param {String} [name]\n     * @returns {String}\n     */\n    function getNodeName(parent, node, name) {\n        var parentName = parent && parent.name;\n\n        if (typeof name !== 'string') {\n            name = node.name || name;\n        }\n\n        return utils.fullPath(parentName, name);\n    }\n\n    /**\n     * Get node type from node or parent.\n     *\n     * @param {Object} parent\n     * @param {Object} node\n     * @returns {String}\n     */\n    function getNodeType(parent, node) {\n        return node.type || parent && parent.childType;\n    }\n\n    /**\n     * Get data scope based on parent data scope and node data scope.\n     *\n     * @param {Object} parent\n     * @param {Object} node\n     * @returns {String}\n     */\n    function getDataScope(parent, node) {\n        var dataScope = node.dataScope,\n            parentScope = parent && parent.dataScope;\n\n        return !utils.isEmpty(parentScope) ?\n            !utils.isEmpty(dataScope) ?\n                parentScope + '.' + dataScope :\n                parentScope :\n            dataScope || '';\n    }\n\n    /**\n     * Load node dependencies on other instances.\n     *\n     * @param {Object} node\n     * @returns {jQueryPromise}\n     */\n    function loadDeps(node) {\n        var loaded = $.Deferred(),\n            loggerUtils = consoleLogger.utils;\n\n        if (node.deps) {\n            consoleLogger.utils.asyncLog(\n                loaded,\n                {\n                    data: {\n                        component: node.name,\n                        deps: node.deps\n                    },\n                    messages: loggerUtils.createMessages(\n                        'depsStartRequesting',\n                        'depsFinishRequesting',\n                        'depsLoadingFail'\n                    )\n                }\n            );\n        }\n\n        registry.get(node.deps, function (deps) {\n            node.provider = node.extendProvider ? deps && deps.name : node.provider;\n            loaded.resolve(node);\n        });\n\n        return loaded.promise();\n    }\n\n    /**\n     * Load node component file via requirejs.\n     *\n     * @param {Object} node\n     * @returns {jQueryPromise}\n     */\n    function loadSource(node) {\n        var loaded = $.Deferred(),\n            source = node.component;\n\n        consoleLogger.info('componentStartLoading', {\n            component: node.component\n        });\n\n        require([source], function (constr) {\n            consoleLogger.info('componentFinishLoading', {\n                component: node.component\n            });\n            loaded.resolve(node, constr);\n        }, function () {\n            consoleLogger.error('componentLoadingFail', {\n                component: node.component\n            });\n        });\n\n        return loaded.promise();\n    }\n\n    /**\n     * Create a new component instance and set it to the registry.\n     *\n     * @param {Object} node\n     * @param {Function} Constr\n     */\n    function initComponent(node, Constr) {\n        var component = new Constr(_.omit(node, 'children'));\n\n        consoleLogger.info('componentStartInitialization', {\n            component: node.component,\n            componentName: node.name\n        });\n\n        registry.set(node.name, component);\n    }\n\n    /**\n     * Application entry point.\n     *\n     * @param {Object} nodes\n     * @param {Object} parent\n     * @param {Boolean} cached\n     * @param {Boolean} merge\n     * @returns {Boolean|undefined}\n     */\n    function run(nodes, parent, cached, merge) {\n        if (_.isBoolean(merge) && merge) {\n            layout.merge(nodes);\n\n            return false;\n        }\n\n        if (cached) {\n            cachedConfig[_.keys(nodes)[0]] = JSON.parse(JSON.stringify(nodes));\n        }\n\n        _.each(nodes || [], layout.iterator.bind(layout, parent));\n    }\n\n    _.extend(layout, {\n        /**\n         * Determines if node ready to be added or process it.\n         *\n         * @param {Object} parent\n         * @param {Object|String} node\n         */\n        iterator: function (parent, node) {\n            var action = _.isString(node) ?\n                this.addChild :\n                this.process;\n\n            action.apply(this, arguments);\n        },\n\n        /**\n         * Prepare component.\n         *\n         * @param {Object} parent\n         * @param {Object} node\n         * @param {String} name\n         * @returns {Object}\n         */\n        process: function (parent, node, name) {\n            if (!parent && node.parent) {\n                return this.waitParent(node, name);\n            }\n\n            if (node.nodeTemplate) {\n                return this.waitTemplate.apply(this, arguments);\n            }\n\n            node = this.build.apply(this, arguments);\n\n            if (!registry.has(node.name)) {\n                this.addChild(parent, node)\n                    .manipulate(node)\n                    .initComponent(node);\n            }\n\n            if (node) {\n                run(node.children, node);\n            }\n\n            return this;\n        },\n\n        /**\n         * Detailed processing of component config.\n         *\n         * @param {Object} parent\n         * @param {Object} node\n         * @param {String} name\n         * @returns {Boolean|Object}\n         */\n        build: function (parent, node, name) {\n            var defaults    = parent && parent.childDefaults || {},\n                children    = this.filterDisabledChildren(node.children),\n                type        = getNodeType(parent, node),\n                dataScope   = getDataScope(parent, node),\n                component,\n                extendDeps  = true,\n                nodeName;\n\n            node.children = false;\n            node.extendProvider = true;\n\n            if (node.config && node.config.provider || node.provider) {\n                node.extendProvider = false;\n            }\n\n            if (node.config && node.config.deps || node.deps) {\n                extendDeps = false;\n            }\n\n            node = utils.extend({\n            }, types.get(type), defaults, node);\n\n            nodeName = getNodeName(parent, node, name);\n\n            if (registry.has(nodeName)) {\n                component = registry.get(nodeName);\n                component.children = children;\n\n                return component;\n            }\n\n            if (extendDeps && parent && parent.deps && type) {\n                node.deps = parent.deps;\n            }\n\n            _.extend(node, node.config || {}, {\n                index: node.name || name,\n                name: nodeName,\n                dataScope: dataScope,\n                parentName: utils.getPart(nodeName, -2),\n                parentScope: utils.getPart(dataScope, -2)\n            });\n\n            node.children = children;\n            node.componentType = node.type;\n\n            delete node.type;\n            delete node.config;\n\n            if (children) {\n                node.initChildCount = _.size(children);\n            }\n\n            if (node.isTemplate) {\n                node.isTemplate = false;\n\n                templates.set(node.name, node);\n                registry.get(node.parentName, function (parentComp) {\n                    parentComp.childTemplate = node;\n                });\n\n                return false;\n            }\n\n            if (node.componentDisabled === true) {\n                return false;\n            }\n\n            return node;\n        },\n\n        /**\n         * Filter out all disabled components.\n         *\n         * @param {Object} children\n         * @returns {*}\n         */\n        filterDisabledChildren: function (children) {\n            var cIds;\n\n            //cleanup children config.componentDisabled = true\n            if (children && typeof children === 'object') {\n                cIds = Object.keys(children);\n\n                if (cIds) {\n                    _.each(cIds, function (cId) {\n                        if (typeof children[cId] === 'object' &&\n                            children[cId].hasOwnProperty('config') &&\n                            typeof children[cId].config === 'object' &&\n                            children[cId].config.hasOwnProperty('componentDisabled') &&\n                            children[cId].config.componentDisabled === true) {\n                            delete children[cId];\n                        }\n                    });\n                }\n            }\n\n            return children;\n        },\n\n        /**\n         * Init component.\n         *\n         * @param {Object} node\n         * @returns {Object}\n         */\n        initComponent: function (node) {\n            if (!node.component) {\n                return this;\n            }\n\n            loadDeps(node)\n                .then(loadSource)\n                .done(initComponent);\n\n            return this;\n        }\n    });\n\n    _.extend(layout, {\n        /**\n         * Loading component marked as isTemplate.\n         *\n         * @param {Object} parent\n         * @param {Object} node\n         * @returns {Object}\n         */\n        waitTemplate: function (parent, node) {\n            var args = _.toArray(arguments);\n\n            templates.get(node.nodeTemplate, function () {\n                this.applyTemplate.apply(this, args);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Waiting for parent component and process provided component.\n         *\n         * @param {Object} node\n         * @param {String} name\n         * @returns {Object}\n         */\n        waitParent: function (node, name) {\n            var process = this.process.bind(this);\n\n            registry.get(node.parent, function (parent) {\n                process(parent, node, name);\n            });\n\n            return this;\n        },\n\n        /**\n         * Processing component marked as isTemplate.\n         *\n         * @param {Object} parent\n         * @param {Object} node\n         * @param {String} name\n         */\n        applyTemplate: function (parent, node, name) {\n            var template = templates.get(node.nodeTemplate);\n\n            node = utils.extend({}, template, node);\n\n            delete node.nodeTemplate;\n\n            this.process(parent, node, name);\n        }\n    });\n\n    _.extend(layout, {\n        /**\n         * Determines inserting strategy.\n         *\n         * @param {Object} node\n         * @returns {Object}\n         */\n        manipulate: function (node) {\n            var name = node.name;\n\n            if (node.appendTo) {\n                this.insert(name, node.appendTo, -1);\n            }\n\n            if (node.prependTo) {\n                this.insert(name, node.prependTo, 0);\n            }\n\n            if (node.insertTo) {\n                this.insertTo(name, node.insertTo);\n            }\n\n            return this;\n        },\n\n        /**\n         * Insert component to provide target and position.\n         *\n         * @param {Object|String} item\n         * @param {Object} target\n         * @param {Number} position\n         * @returns {Object}\n         */\n        insert: function (item, target, position) {\n            registry.get(target, function (container) {\n                container.insertChild(item, position);\n            });\n\n            return this;\n        },\n\n        /**\n         * Insert component into multiple targets.\n         *\n         * @param {Object} item\n         * @param {Array} targets\n         * @returns {Object}\n         */\n        insertTo: function (item, targets) {\n            _.each(targets, function (info, target) {\n                this.insert(item, target, info.position);\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * Add provided child to parent.\n         *\n         * @param {Object} parent\n         * @param {Object|String} child\n         * @returns {Object}\n         */\n        addChild: function (parent, child) {\n            var name;\n\n            if (parent && parent.component) {\n                name = child.name || child;\n\n                this.insert(name, parent.name, child.sortOrder);\n            }\n\n            return this;\n        },\n\n        /**\n         * Merge components configuration with cached configuration.\n         *\n         * @param {Array} components\n         */\n        merge: function (components) {\n            var cachedKey = _.keys(components)[0],\n                compared = utils.compare(cachedConfig[cachedKey], components),\n                remove = this.filterComponents(this.getByProperty(compared.changes, 'type', 'remove'), true),\n                update = this.getByProperty(compared.changes, 'type', 'update'),\n                dataSources = this.getDataSources(components),\n                names, index, name, component;\n\n            _.each(dataSources, function (val, key) {\n                name = key.replace(/\\.children|\\.config/g, '');\n                component = registry.get(name);\n\n                component.cacheData();\n                component.updateConfig(\n                    true,\n                    this.getFullConfig(key, components),\n                    this.getFullConfig(key, cachedConfig[cachedKey])\n                );\n            }, this);\n\n            _.each(remove, function (val) {\n                component = registry.get(val.path);\n\n                if (component) {\n                    component.cleanData().destroy();\n                }\n            });\n\n            update = _.compact(_.filter(update, function (val) {\n                return !_.isEqual(val.oldValue, val.value);\n            }));\n\n            _.each(update, function (val) {\n                names = val.path.split('.');\n                index = Math.max(_.lastIndexOf(names, 'config'), _.lastIndexOf(names, 'children') + 2);\n                name = _.without(names.splice(0, index), 'children', 'config').join('.');\n                component = registry.get(name);\n\n                if (val.name === 'sortOrder' && component) {\n                    registry.get(component.parentName).insertChild(component, val.value);\n                } else if (component) {\n                    component.updateConfig(\n                        val.oldValue,\n                        val.value,\n                        val.path\n                    );\n                }\n            }, this);\n\n            run(components, undefined, true);\n        },\n\n        /**\n         * Recursive dataSource assignment.\n         *\n         * @param {Object} config\n         * @param {String} parentPath\n         * @returns {Object}\n         */\n        getDataSources: function (config, parentPath) {\n            var dataSources = {},\n                key, obj;\n\n            /* eslint-disable no-loop-func, max-depth */\n            for (key in config) {\n                if (config.hasOwnProperty(key)) {\n                    if (\n                        key === 'type' &&\n                        config[key] === 'dataSource' &&\n                        config.hasOwnProperty('config')\n                    ) {\n                        dataSources[parentPath + '.config'] = config.config;\n                    } else if (_.isObject(config[key])) {\n                        obj = this.getDataSources(config[key], utils.fullPath(parentPath, key));\n\n                        _.each(obj, function (value, path) {\n                            dataSources[path] = value;\n                        });\n                    }\n                }\n            }\n\n            /* eslint-enable no-loop-func, max-depth */\n\n            return dataSources;\n        },\n\n        /**\n         * Configuration getter.\n         *\n         * @param {String} path\n         * @param {Object} config\n         * @returns {Boolean|Object}\n         */\n        getFullConfig: function (path, config) {\n            var index;\n\n            path = path.split('.');\n            index = _.lastIndexOf(path, 'config');\n\n            if (!~index) {\n                return false;\n            }\n            path = path.splice(0, index);\n\n            _.each(path, function (val) {\n                config = config[val];\n            });\n\n            return config.config;\n        },\n\n        /**\n         * Filter data by property and value.\n         *\n         * @param {Object} data\n         * @param {String} prop\n         * @param {*} propValue\n         */\n        getByProperty: function (data, prop, propValue) {\n            return _.filter(data, function (value) {\n                return value[prop] === propValue;\n            });\n        },\n\n        /**\n         * Filter components.\n         *\n         * @param {Array} data\n         * @param {Boolean} splitPath\n         * @param {Number} index\n         * @param {String} separator\n         * @param {String} keyName\n         * @returns {Array}\n         */\n        filterComponents: function (data, splitPath, index, separator, keyName) {\n            var result = [],\n                names, length;\n\n            index = -2;\n            separator = '.' || separator;\n            keyName = 'children' || keyName;\n\n            _.each(data, function (val) {\n                names = val.path.split(separator);\n                length  = names.length;\n\n                if (names[length + index] === keyName) {\n                    val.path = splitPath ? _.without(names, keyName).join(separator) : val.path;\n                    result.push(val);\n                }\n            });\n\n            return result;\n        }\n    });\n\n    return run;\n});\n","Magento_Ui/js/dynamic-rows/record.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    'uiCollection',\n    'uiRegistry'\n], function (_, uiCollection, registry) {\n    'use strict';\n\n    return uiCollection.extend({\n        defaults: {\n            visible: true,\n            disabled: true,\n            headerLabel: '',\n            label: '',\n            positionProvider: 'position',\n            imports: {\n                data: '${ $.provider }:${ $.dataScope }'\n            },\n            listens: {\n                position: 'initPosition',\n                elems: 'setColumnVisibleListener'\n            },\n            links: {\n                position: '${ $.name }.${ $.positionProvider }:value'\n            },\n            exports: {\n                recordId: '${ $.provider }:${ $.dataScope }.record_id'\n            },\n            modules: {\n                parentComponent: '${ $.parentName }'\n            }\n        },\n\n        /**\n         * Extends instance with default config, calls initialize of parent\n         * class, calls initChildren method, set observe variable.\n         * Use parent \"track\" method - wrapper observe array\n         *\n         * @returns {Object} Chainable.\n         */\n        initialize: function () {\n            var self = this;\n\n            this._super();\n\n            registry.async(this.name + '.' + this.positionProvider)(function (component) {\n\n                /**\n                 * Overwrite hasChanged method\n                 *\n                 * @returns {Boolean}\n                 */\n                component.hasChanged = function () {\n\n                    /* eslint-disable eqeqeq */\n                    return this.value().toString() != this.initialValue.toString();\n\n                    /* eslint-enable eqeqeq */\n                };\n\n                if (!component.initialValue) {\n                    component.initialValue = self.parentComponent().maxPosition;\n                    component.bubble('update', component.hasChanged());\n                }\n            });\n\n            return this;\n        },\n\n        /**\n         * Init config\n         *\n         * @returns {Object} Chainable.\n         */\n        initConfig: function () {\n            this._super();\n\n            this.label = this.label || this.headerLabel;\n\n            return this;\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .track('position')\n                .observe([\n                    'visible',\n                    'disabled',\n                    'data',\n                    'label'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Init element position\n         *\n         * @param {Number} position - element position\n         */\n        initPosition: function (position) {\n            var pos = parseInt(position, 10);\n\n            this.parentComponent().setMaxPosition(pos, this);\n\n            if (!pos && pos !== 0) {\n                this.position = this.parentComponent().maxPosition;\n            }\n        },\n\n        /**\n         * Set column visibility listener\n         */\n        setColumnVisibleListener: function () {\n            var elem = _.find(this.elems(), function (curElem) {\n                return !curElem.hasOwnProperty('visibleListener');\n            });\n\n            if (!elem) {\n                return;\n            }\n\n            this.childVisibleListener(elem);\n\n            if (!elem.visibleListener) {\n                elem.on('visible', this.childVisibleListener.bind(this, elem));\n            }\n\n            elem.visibleListener = true;\n        },\n\n        /**\n         * Child visibility listener\n         *\n         * @param {Object} data\n         */\n        childVisibleListener: function (data) {\n            this.setVisibilityColumn(data.index, data.visible());\n        },\n\n        /**\n         * Reset data to initial value.\n         * Call method reset on child elements.\n         */\n        reset: function () {\n            var elems = this.elems(),\n                nameIsEqual,\n                dataScopeIsEqual;\n\n            _.each(elems, function (elem) {\n                nameIsEqual = this.name + '.' + this.positionProvider === elem.name;\n                dataScopeIsEqual = this.dataScope === elem.dataScope;\n\n                if (!(nameIsEqual || dataScopeIsEqual) && _.isFunction(elem.reset)) {\n                    elem.reset();\n                }\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * Clear data\n         *\n         * @returns {Collection} Chainable.\n         */\n        clear: function () {\n            var elems = this.elems(),\n                nameIsEqual,\n                dataScopeIsEqual;\n\n            _.each(elems, function (elem) {\n                nameIsEqual = this.name + '.' + this.positionProvider === elem.name;\n                dataScopeIsEqual = this.dataScope === elem.dataScope;\n\n                if (!(nameIsEqual || dataScopeIsEqual) && _.isFunction(elem.reset)) {\n                    elem.clear();\n                }\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * Get label for collapsible header\n         *\n         * @param {String} label\n         *\n         * @returns {String}\n         */\n        getLabel: function (label) {\n            if (_.isString(label)) {\n                this.label(label);\n            } else if (label && this.label()) {\n                return this.label();\n            } else {\n                this.label(this.headerLabel);\n            }\n\n            return this.label();\n        },\n\n        /**\n         * Set visibility to record child\n         *\n         * @param {Boolean} state\n         */\n        setVisible: function (state) {\n            this.elems.each(function (cell) {\n                cell.visible(state);\n            });\n        },\n\n        /**\n         * Set visibility to child by index\n         *\n         * @param {Number} index\n         * @param {Boolean} state\n         */\n        setVisibilityColumn: function (index, state) {\n            var elems = this.elems(),\n                curElem = parseInt(index, 10),\n                label;\n\n            if (!this.parentComponent()) {\n                return false;\n            }\n\n            if (_.isNaN(curElem)) {\n                _.findWhere(elems, {\n                    index: index\n                }).visible(state);\n                label = _.findWhere(this.parentComponent().labels(), {\n                    name: index\n                });\n                label.defaultLabelVisible && label.visible(state);\n            } else {\n                elems[curElem].visible(state);\n            }\n        },\n\n        /**\n         * Set disabled to child\n         *\n         * @param {Boolean} state\n         */\n        setDisabled: function (state) {\n            this.elems.each(function (cell) {\n                cell.disabled(state);\n            });\n        },\n\n        /**\n         * Set disabled to child by index\n         *\n         * @param {Number} index\n         * @param {Boolean} state\n         */\n        setDisabledColumn: function (index, state) {\n            index = ~~index;\n            this.elems()[index].disabled(state);\n        }\n    });\n});\n","Magento_Ui/js/dynamic-rows/dynamic-rows.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'ko',\n    'mageUtils',\n    'underscore',\n    'uiLayout',\n    'uiCollection',\n    'uiRegistry',\n    'mage/translate'\n], function (ko, utils, _, layout, uiCollection, registry, $t) {\n    'use strict';\n\n    /**\n     * Checks value type and cast to boolean if needed\n     *\n     * @param {*} value\n     *\n     * @returns {Boolean|*} casted or origin value\n     */\n    function castValue(value) {\n        if (_.isUndefined(value) || value === '' || _.isNull(value)) {\n            return false;\n        }\n\n        return value;\n    }\n\n    /**\n     * Compares arrays.\n     *\n     * @param {Array} base - array as method bases its decision on first argument.\n     * @param {Array} current - second array\n     *\n     * @returns {Boolean} result - is current array equal to base array\n     */\n    function compareArrays(base, current) {\n        var index = 0,\n            length = base.length;\n\n        if (base.length !== current.length) {\n            return false;\n        }\n\n        /*eslint-disable max-depth, eqeqeq, no-use-before-define */\n        for (index; index < length; index++) {\n            if (_.isArray(base[index]) && _.isArray(current[index])) {\n                if (!compareArrays(base[index], current[index])) {\n                    return false;\n                }\n            } else if (typeof base[index] === 'object' && typeof current[index] === 'object') {\n                if (!compareObjects(base[index], current[index])) {\n                    return false;\n                }\n            } else if (castValue(base[index]) != castValue(current[index])) {\n                return false;\n            }\n        }/*eslint-enable max-depth, eqeqeq, no-use-before-define */\n\n        return true;\n    }\n\n    /**\n     * Compares objects. Compares only properties from origin object,\n     * if current object has more properties - they are not considered\n     *\n     * @param {Object} base - first object\n     * @param {Object} current - second object\n     *\n     * @returns {Boolean} result - is current object equal to base object\n     */\n    function compareObjects(base, current) {\n        var prop;\n\n        /*eslint-disable max-depth, eqeqeq*/\n        for (prop in base) {\n            if (_.isArray(base[prop]) && _.isArray(current[prop])) {\n                if (!compareArrays(base[prop], current[prop])) {\n                    return false;\n                }\n            } else if (typeof base[prop] === 'object' && typeof current[prop] === 'object') {\n                if (!compareObjects(base[prop], current[prop])) {\n                    return false;\n                }\n            } else if (castValue(base[prop]) != castValue(current[prop])) {\n                return false;\n            }\n        }/*eslint-enable max-depth, eqeqeq */\n\n        return true;\n    }\n\n    return uiCollection.extend({\n        defaults: {\n            defaultRecord: false,\n            columnsHeader: true,\n            columnsHeaderAfterRender: false,\n            columnsHeaderClasses: '',\n            labels: [],\n            recordTemplate: 'record',\n            collapsibleHeader: false,\n            additionalClasses: {},\n            visible: true,\n            disabled: false,\n            fit: false,\n            addButton: true,\n            addButtonLabel: $t('Add'),\n            recordData: [],\n            maxPosition: 0,\n            deleteProperty: 'delete',\n            identificationProperty: 'record_id',\n            deleteValue: true,\n            showSpinner: true,\n            isDifferedFromDefault: false,\n            defaultState: [],\n            defaultPagesState: {},\n            pagesChanged: {},\n            hasInitialPagesState: {},\n            changed: false,\n            fallbackResetTpl: 'ui/form/element/helper/fallback-reset-link',\n            dndConfig: {\n                name: '${ $.name }_dnd',\n                component: 'Magento_Ui/js/dynamic-rows/dnd',\n                template: 'ui/dynamic-rows/cells/dnd',\n                recordsProvider: '${ $.name }',\n                enabled: true\n            },\n            templates: {\n                record: {\n                    parent: '${ $.$data.collection.name }',\n                    name: '${ $.$data.index }',\n                    dataScope: '${ $.$data.collection.index }.${ $.name }',\n                    nodeTemplate: '${ $.parent }.${ $.$data.collection.recordTemplate }'\n                }\n            },\n            links: {\n                recordData: '${ $.provider }:${ $.dataScope }.${ $.index }'\n            },\n            listens: {\n                visible: 'setVisible',\n                disabled: 'setDisabled',\n                childTemplate: 'initHeader',\n                recordTemplate: 'onUpdateRecordTemplate',\n                recordData: 'setDifferedFromDefault parsePagesData setRecordDataToCache',\n                currentPage: 'changePage',\n                elems: 'checkSpinner',\n                changed: 'updateTrigger'\n            },\n            modules: {\n                dnd: '${ $.dndConfig.name }'\n            },\n            pages: 1,\n            pageSize: 20,\n            relatedData: [],\n            currentPage: 1,\n            recordDataCache: [],\n            startIndex: 0\n        },\n\n        /**\n         * Sets record data to cache\n         */\n        setRecordDataToCache: function (data) {\n            this.recordDataCache = data;\n        },\n\n        /**\n         * Extends instance with default config, calls initialize of parent\n         * class, calls initChildren method, set observe variable.\n         * Use parent \"track\" method - wrapper observe array\n         *\n         * @returns {Object} Chainable.\n         */\n        initialize: function () {\n            _.bindAll(this,\n                'processingDeleteRecord',\n                'onChildrenUpdate',\n                'checkDefaultState',\n                'renderColumnsHeader',\n                'deleteHandler',\n                'setDefaultState'\n            );\n\n            this._super()\n                .initChildren()\n                .initDnd()\n                .initDefaultRecord()\n                .setInitialProperty()\n                .setColumnsHeaderListener()\n                .checkSpinner();\n\n            this.on('recordData', this.checkDefaultState);\n\n            return this;\n        },\n\n        /**\n         * @inheritdoc\n         */\n        bubble: function (event) {\n            if (event === 'deleteRecord' || event === 'update') {\n                return false;\n            }\n\n            return this._super();\n        },\n\n        /**\n         * Inits DND module\n         *\n         * @returns {Object} Chainable.\n         */\n        initDnd: function () {\n            if (this.dndConfig.enabled) {\n                layout([this.dndConfig]);\n            }\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        destroy: function () {\n            if (this.dnd()) {\n                this.dnd().destroy();\n            }\n            this._super();\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .track('childTemplate')\n                .observe([\n                    'pages',\n                    'currentPage',\n                    'recordData',\n                    'columnsHeader',\n                    'visible',\n                    'disabled',\n                    'labels',\n                    'showSpinner',\n                    'isDifferedFromDefault',\n                    'changed'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initElement: function (elem) {\n            this._super();\n            elem.on({\n                'deleteRecord': this.deleteHandler,\n                'update': this.onChildrenUpdate,\n                'addChild': this.setDefaultState\n            });\n\n            return this;\n        },\n\n        /**\n         * Handler for deleteRecord event\n         *\n         * @param {Number|String} index - element index\n         * @param {Number|String} id\n         */\n        deleteHandler: function (index, id) {\n            var defaultState;\n\n            this.setDefaultState();\n            defaultState = this.defaultPagesState[this.currentPage()];\n            this.processingDeleteRecord(index, id);\n            this.pagesChanged[this.currentPage()] =\n                !compareArrays(defaultState, this.arrayFilter(this.getChildItems()));\n            this.changed(_.some(this.pagesChanged));\n        },\n\n        /**\n         * Set initial property to records data\n         *\n         * @returns {Object} Chainable.\n         */\n        setInitialProperty: function () {\n            if (_.isArray(this.recordData())) {\n                this.recordData.each(function (data, index) {\n                    this.source.set(this.dataScope + '.' + this.index + '.' + index + '.initialize', true);\n                }, this);\n            }\n\n            return this;\n        },\n\n        /**\n         * Handler for update event\n         *\n         * @param {Boolean} state\n         */\n        onChildrenUpdate: function (state) {\n            var changed,\n                dataScope,\n                changedElemDataScope;\n\n            if (state && !this.hasInitialPagesState[this.currentPage()]) {\n                this.setDefaultState();\n                changed = this.getChangedElems(this.elems());\n                dataScope = this.elems()[0].dataScope.split('.');\n                dataScope.splice(dataScope.length - 1, 1);\n                changed.forEach(function (elem) {\n                    changedElemDataScope = elem.dataScope.split('.');\n                    changedElemDataScope.splice(0, dataScope.length);\n                    changedElemDataScope[0] =\n                        (parseInt(changedElemDataScope[0], 10) - this.pageSize * (this.currentPage() - 1)).toString();\n                    this.setValueByPath(\n                        this.defaultPagesState[this.currentPage()],\n                        changedElemDataScope, elem.initialValue\n                    );\n                }, this);\n            }\n\n            if (this.defaultPagesState[this.currentPage()]) {\n                this.setChangedForCurrentPage();\n            }\n        },\n\n        /**\n         * Set default dynamic-rows state or state before changing data\n         *\n         * @param {Array} data - defaultState data\n         */\n        setDefaultState: function (data) {\n            var componentData,\n                childItems;\n\n            if (!this.hasInitialPagesState[this.currentPage()]) {\n                childItems = this.getChildItems();\n                componentData = childItems.length ?\n                    utils.copy(childItems) :\n                    utils.copy(this.getChildItems(this.recordDataCache));\n                componentData.forEach(function (dataObj) {\n                    if (dataObj.hasOwnProperty('initialize')) {\n                        delete dataObj.initialize;\n                    }\n                });\n\n                this.hasInitialPagesState[this.currentPage()] = true;\n                this.defaultPagesState[this.currentPage()] = data ? data : this.arrayFilter(componentData);\n            }\n        },\n\n        /**\n         * Sets value to object by string path\n         *\n         * @param {Object} obj\n         * @param {Array|String} path\n         * @param {*} value\n         */\n        setValueByPath: function (obj, path, value) {\n            var prop;\n\n            if (_.isString(path)) {\n                path = path.split('.');\n            }\n\n            if (path.length - 1) {\n                prop = obj[path[0]];\n                path.splice(0, 1);\n                this.setValueByPath(prop, path, value);\n            } else if (path.length && obj) {\n                obj[path[0]] = value;\n            }\n        },\n\n        /**\n         * Returns elements which changed self state\n         *\n         * @param {Array} array - data array\n         * @param {Array} changed - array with changed elements\n         * @returns {Array} changed - array with changed elements\n         */\n        getChangedElems: function (array, changed) {\n            changed = changed || [];\n\n            array.forEach(function (elem) {\n                if (_.isFunction(elem.elems)) {\n                    this.getChangedElems(elem.elems(), changed);\n                } else if (_.isFunction(elem.hasChanged) && elem.hasChanged()) {\n                    changed.push(elem);\n                }\n            }, this);\n\n            return changed;\n        },\n\n        /**\n         * Checks columnsHeaderAfterRender property,\n         * and set listener on elems if needed\n         *\n         * @returns {Object} Chainable.\n         */\n        setColumnsHeaderListener: function () {\n            if (this.columnsHeaderAfterRender) {\n                this.on('recordData', this.renderColumnsHeader);\n\n                if (_.isArray(this.recordData()) && this.recordData().length) {\n                    this.renderColumnsHeader();\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Checks whether component's state is default or not\n         */\n        checkDefaultState: function () {\n            var isRecordDataArray = _.isArray(this.recordData()),\n                initialize,\n                hasNotDefaultRecords = isRecordDataArray ? !!this.recordData().filter(function (data) {\n                    return !data.initialize;\n                }).length : false;\n\n            if (!this.hasInitialPagesState[this.currentPage()] && isRecordDataArray && hasNotDefaultRecords) {\n                this.hasInitialPagesState[this.currentPage()] = true;\n                this.defaultPagesState[this.currentPage()] = utils.copy(this.getChildItems().filter(function (data) {\n                    initialize = data.initialize;\n                    delete data.initialize;\n\n                    return initialize;\n                }));\n\n                this.setChangedForCurrentPage();\n            } else if (this.hasInitialPagesState[this.currentPage()]) {\n                this.setChangedForCurrentPage();\n            }\n        },\n\n        /**\n         * Filters out deleted items from array\n         *\n         * @param {Array} data\n         *\n         * @returns {Array} filtered array\n         */\n        arrayFilter: function (data) {\n            var prop;\n\n            /*eslint-disable no-loop-func*/\n            data.forEach(function (elem) {\n                for (prop in elem) {\n                    if (_.isArray(elem[prop])) {\n                        elem[prop] = _.filter(elem[prop], function (elemProp) {\n                            return elemProp[this.deleteProperty] !== this.deleteValue;\n                        }, this);\n\n                        elem[prop].forEach(function (elemProp) {\n                            if (_.isArray(elemProp)) {\n                                elem[prop] = this.arrayFilter(elemProp);\n                            }\n                        }, this);\n                    }\n                }\n            }, this);\n\n            /*eslint-enable no-loop-func*/\n\n            return data;\n        },\n\n        /**\n         * Triggers update event\n         *\n         * @param {Boolean} val\n         */\n        updateTrigger: function (val) {\n            this.trigger('update', val);\n        },\n\n        /**\n         * Returns component state\n         */\n        hasChanged: function () {\n            return this.changed();\n        },\n\n        /**\n         * Render column header\n         */\n        renderColumnsHeader: function () {\n            this.recordData().length ? this.columnsHeader(true) : this.columnsHeader(false);\n        },\n\n        /**\n         * Init default record\n         *\n         * @returns Chainable.\n         */\n        initDefaultRecord: function () {\n            if (this.defaultRecord && !this.recordData().length) {\n                this.addChild();\n            }\n\n            return this;\n        },\n\n        /**\n         * Create header template\n         *\n         * @param {Object} prop - instance obj\n         *\n         * @returns {Object} Chainable.\n         */\n        createHeaderTemplate: function (prop) {\n            var visible = prop.visible !== false,\n                disabled = _.isUndefined(prop.disabled) ? this.disabled() : prop.disabled;\n\n            return {\n                visible: ko.observable(visible),\n                disabled: ko.observable(disabled)\n            };\n        },\n\n        /**\n         * Init header elements\n         */\n        initHeader: function () {\n            var labels = [],\n                data;\n\n            if (!this.labels().length) {\n                _.each(this.childTemplate.children, function (cell) {\n                    data = this.createHeaderTemplate(cell.config);\n                    cell.config.labelVisible = false;\n                    _.extend(data, {\n                        defaultLabelVisible: data.visible(),\n                        label: cell.config.label,\n                        name: cell.name,\n                        required: !!cell.config.validation,\n                        columnsHeaderClasses: cell.config.columnsHeaderClasses,\n                        sortOrder: cell.config.sortOrder\n                    });\n                    labels.push(data);\n                }, this);\n                this.labels(_.sortBy(labels, 'sortOrder'));\n            }\n        },\n\n        /**\n         * Set max element position\n         *\n         * @param {Number} position - element position\n         * @param {Object} elem - instance\n         */\n        setMaxPosition: function (position, elem) {\n            if (position || position === 0) {\n                this.checkMaxPosition(position);\n                this.sort(position, elem);\n            } else {\n                this.maxPosition += 1;\n            }\n        },\n\n        /**\n         * Sort element by position\n         *\n         * @param {Number} position - element position\n         * @param {Object} elem - instance\n         */\n        sort: function (position, elem) {\n            var that = this,\n                sorted,\n                updatedCollection;\n\n            if (this.elems().filter(function (el) {\n                    return el.position || el.position === 0;\n                }).length !== this.getChildItems().length) {\n\n                return false;\n            }\n\n            if (!elem.containers.length) {\n                registry.get(elem.name, function () {\n                    that.sort(position, elem);\n                });\n\n                return false;\n            }\n\n            sorted = this.elems().sort(function (propOne, propTwo) {\n                return ~~propOne.position - ~~propTwo.position;\n            });\n\n            updatedCollection = this.updatePosition(sorted, position, elem.name);\n            this.elems(updatedCollection);\n        },\n\n        /**\n         * Checking loader visibility\n         *\n         * @param {Array} elems\n         */\n        checkSpinner: function (elems) {\n            this.showSpinner(!(!this.recordData().length || elems && elems.length === this.getChildItems().length));\n        },\n\n        /**\n         * Filtering data and calculates the quantity of pages\n         *\n         * @param {Array} data\n         */\n        parsePagesData: function (data) {\n            var pages;\n\n            this.relatedData = this.deleteProperty ?\n                _.filter(data, function (elem) {\n                    return elem && elem[this.deleteProperty] !== this.deleteValue;\n                }, this) : data;\n\n            pages = Math.ceil(this.relatedData.length / this.pageSize) || 1;\n            this.pages(pages);\n        },\n\n        /**\n         * Reinit record data in order to remove deleted values\n         *\n         * @return void\n         */\n        reinitRecordData: function () {\n            this.recordData(\n                _.filter(this.recordData(), function (elem) {\n                    return elem && elem[this.deleteProperty] !== this.deleteValue;\n                }, this)\n            );\n        },\n\n        /**\n         * Get items to rendering on current page\n         *\n         * @returns {Array} data\n         */\n        getChildItems: function (data, page) {\n            var dataRecord = data || this.relatedData,\n                startIndex;\n\n            this.startIndex = (~~this.currentPage() - 1) * this.pageSize;\n\n            startIndex = page || this.startIndex;\n\n            return dataRecord.slice(startIndex, this.startIndex + this.pageSize);\n        },\n\n        /**\n         * Get record count with filtered delete property.\n         *\n         * @returns {Number} count\n         */\n        getRecordCount: function () {\n            return _.filter(this.recordData(), function (record) {\n                return record && record[this.deleteProperty] !== this.deleteValue;\n            }, this).length;\n        },\n\n        /**\n         * Get number of columns\n         *\n         * @returns {Number} columns\n         */\n        getColumnsCount: function () {\n            return this.labels().length + (this.dndConfig.enabled ? 1 : 0);\n        },\n\n        /**\n         * Processing pages before addChild\n         *\n         * @param {Object} ctx - element context\n         * @param {Number|String} index - element index\n         * @param {Number|String} prop - additional property to element\n         */\n        processingAddChild: function (ctx, index, prop) {\n            this.bubble('addChild', false);\n\n            if (this.relatedData.length && this.relatedData.length % this.pageSize === 0) {\n                this.pages(this.pages() + 1);\n                this.nextPage();\n            } else if (~~this.currentPage() !== this.pages()) {\n                this.currentPage(this.pages());\n            }\n\n            this.addChild(ctx, index, prop);\n        },\n\n        /**\n         * Processing pages before deleteRecord\n         *\n         * @param {Number|String} index - element index\n         * @param {Number|String} recordId\n         */\n        processingDeleteRecord: function (index, recordId) {\n            this.deleteRecord(index, recordId);\n        },\n\n        /**\n         * Change page\n         *\n         * @param {Number} page - current page\n         */\n        changePage: function (page) {\n            this.clear();\n\n            if (page === 1 && !this.recordData().length) {\n                return false;\n            }\n\n            if (~~page > this.pages()) {\n                this.currentPage(this.pages());\n\n                return false;\n            } else if (~~page < 1) {\n                this.currentPage(1);\n\n                return false;\n            }\n\n            this.initChildren();\n\n            return true;\n        },\n\n        /**\n         * Check page\n         *\n         * @returns {Boolean} is page first or not\n         */\n        isFirst: function () {\n            return this.currentPage() === 1;\n        },\n\n        /**\n         * Check page\n         *\n         * @returns {Boolean} is page last or not\n         */\n        isLast: function () {\n            return this.currentPage() === this.pages();\n        },\n\n        /**\n         * Change page to next\n         */\n        nextPage: function () {\n            this.currentPage(this.currentPage() + 1);\n        },\n\n        /**\n         * Change page to previous\n         */\n        previousPage: function () {\n            this.currentPage(this.currentPage() - 1);\n        },\n\n        /**\n         * Check dependency and set position to elements\n         *\n         * @param {Array} collection - elems\n         * @param {Number} position - current position\n         * @param {String} elemName - element name\n         *\n         * @returns {Array} collection\n         */\n        updatePosition: function (collection, position, elemName) {\n            var curPos,\n                parsePosition = ~~position,\n                result = _.filter(collection, function (record) {\n                    return ~~record.position === parsePosition;\n                });\n\n            if (result[1]) {\n                curPos = parsePosition + 1;\n                result[0].name === elemName ? result[1].position = curPos : result[0].position = curPos;\n                this.updatePosition(collection, curPos);\n            }\n\n            return collection;\n        },\n\n        /**\n         * Check max elements position and set if max\n         *\n         * @param {Number} position - current position\n         */\n        checkMaxPosition: function (position) {\n            var max = 0,\n                pos;\n\n            this.elems.each(function (record) {\n                pos = ~~record.position;\n                pos > max ? max = pos : false;\n            });\n\n            max < position ? max = position : false;\n            this.maxPosition = max;\n        },\n\n        /**\n         * Remove and set new max position\n         */\n        removeMaxPosition: function () {\n            this.maxPosition = 0;\n            this.elems.each(function (record) {\n                this.maxPosition < record.position ? this.maxPosition = ~~record.position : false;\n            }, this);\n        },\n\n        /**\n         * Update record template and rerender elems\n         *\n         * @param {String} recordName - record name\n         */\n        onUpdateRecordTemplate: function (recordName) {\n            if (recordName) {\n                this.recordTemplate = recordName;\n                this.reload();\n            }\n        },\n\n        /**\n         * Delete record\n         *\n         * @param {Number} index - row index\n         *\n         */\n        deleteRecord: function (index, recordId) {\n            var recordInstance,\n                lastRecord,\n                recordsData,\n                lastRecordIndex;\n\n            if (this.deleteProperty) {\n                recordsData = this.recordData();\n                recordInstance = _.find(this.elems(), function (elem) {\n                    return elem.index === index;\n                });\n                recordInstance.destroy();\n                this.elems([]);\n                this._updateCollection();\n                this.removeMaxPosition();\n                recordsData[recordInstance.index][this.deleteProperty] = this.deleteValue;\n                this.recordData(recordsData);\n                this.reinitRecordData();\n                this.reload();\n            } else {\n                this.update = true;\n\n                if (~~this.currentPage() === this.pages()) {\n                    lastRecordIndex = this.startIndex + this.getChildItems().length - 1;\n                    lastRecord =\n                        _.findWhere(this.elems(), {\n                            index: lastRecordIndex\n                        }) ||\n                        _.findWhere(this.elems(), {\n                            index: lastRecordIndex.toString()\n                        });\n\n                    lastRecord.destroy();\n                }\n\n                this.removeMaxPosition();\n                recordsData = this._getDataByProp(recordId);\n                this._updateData(recordsData);\n                this.update = false;\n            }\n\n            this._reducePages();\n            this._sort();\n        },\n\n        /**\n         * Reduce the number of pages\n         *\n         * @private\n         * @return void\n         */\n        _reducePages: function () {\n            if (this.pages() < ~~this.currentPage()) {\n                this.currentPage(this.pages());\n            }\n        },\n\n        /**\n         * Get data object by some property\n         *\n         * @param {Number} id - element id\n         * @param {String} prop - property\n         */\n        _getDataByProp: function (id, prop) {\n            prop = prop || this.identificationProperty;\n\n            return _.reject(this.getChildItems(), function (recordData) {\n                return recordData[prop].toString() === id.toString();\n            }, this);\n        },\n\n        /**\n         * Sort elems by position property\n         */\n        _sort: function () {\n            this.elems(this.elems().sort(function (propOne, propTwo) {\n                return ~~propOne.position - ~~propTwo.position;\n            }));\n        },\n\n        /**\n         * Set new data to dataSource,\n         * delete element\n         *\n         * @param {Array} data - record data\n         */\n        _updateData: function (data) {\n            var elems = _.clone(this.elems()),\n                path,\n                dataArr;\n\n            dataArr = this.recordData.splice(this.startIndex, this.recordData().length - this.startIndex);\n            dataArr.splice(0, this.pageSize);\n            elems = _.sortBy(this.elems(), function (elem) {\n                return ~~elem.index;\n            });\n\n            data.concat(dataArr).forEach(function (rec, idx) {\n                if (elems[idx]) {\n                    elems[idx].recordId = rec[this.identificationProperty];\n                }\n\n                if (!rec.position) {\n                    rec.position = this.maxPosition;\n                    this.setMaxPosition();\n                }\n\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + idx);\n                this.source.set(path, rec);\n            }, this);\n\n            this.elems(elems);\n        },\n\n        /**\n         * Rerender dynamic-rows elems\n         */\n        reload: function () {\n            this.clear();\n            this.initChildren(false, true);\n        },\n\n        /**\n         * Destroy all dynamic-rows elems\n         *\n         * @returns {Object} Chainable.\n         */\n        clear: function () {\n            this.destroyChildren();\n\n            return this;\n        },\n\n        /**\n         * Reset data to initial value.\n         * Call method reset on child elements.\n         */\n        reset: function () {\n            var elems = this.elems();\n\n            _.each(elems, function (elem) {\n                if (_.isFunction(elem.reset)) {\n                    elem.reset();\n                }\n            });\n        },\n\n        /**\n         * Set classes\n         *\n         * @param {Object} data\n         *\n         * @returns {Object} Classes\n         */\n        setClasses: function (data) {\n            var additional;\n\n            if (_.isString(data.additionalClasses)) {\n                additional = data.additionalClasses.split(' ');\n                data.additionalClasses = {};\n\n                additional.forEach(function (name) {\n                    data.additionalClasses[name] = true;\n                });\n            }\n\n            if (!data.additionalClasses) {\n                data.additionalClasses = {};\n            }\n\n            _.extend(data.additionalClasses, {\n                '_fit': data.fit,\n                '_required': data.required,\n                '_error': data.error,\n                '_empty': !this.elems().length,\n                '_no-header': this.columnsHeaderAfterRender || this.collapsibleHeader\n            });\n\n            return data.additionalClasses;\n        },\n\n        /**\n         * Initialize children\n         *\n         * @returns {Object} Chainable.\n         */\n        initChildren: function () {\n            this.showSpinner(true);\n            this.getChildItems().forEach(function (data, index) {\n                this.addChild(data, this.startIndex + index);\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * Set visibility to dynamic-rows child\n         *\n         * @param {Boolean} state\n         */\n        setVisible: function (state) {\n            this.elems.each(function (record) {\n                record.setVisible(state);\n            }, this);\n        },\n\n        /**\n         * Set disabled property to dynamic-rows child\n         *\n         * @param {Boolean} state\n         */\n        setDisabled: function (state) {\n            this.elems.each(function (record) {\n                record.setDisabled(state);\n            }, this);\n        },\n\n        /**\n         * Set visibility to column\n         *\n         * @param {Number} index - column index\n         * @param {Boolean} state\n         */\n        setVisibilityColumn: function (index, state) {\n            this.elems.each(function (record) {\n                record.setVisibilityColumn(index, state);\n            }, this);\n        },\n\n        /**\n         * Set disabled property to column\n         *\n         * @param {Number} index - column index\n         * @param {Boolean} state\n         */\n        setDisabledColumn: function (index, state) {\n            this.elems.each(function (record) {\n                record.setDisabledColumn(index, state);\n            }, this);\n        },\n\n        /**\n         * Add child components\n         *\n         * @param {Object} data - component data\n         * @param {Number} index - record(row) index\n         * @param {Number|String} prop - custom identify property\n         *\n         * @returns {Object} Chainable.\n         */\n        addChild: function (data, index, prop) {\n            var template = this.templates.record,\n                child;\n\n            index = index || _.isNumber(index) ? index : this.recordData().length;\n            prop = prop || _.isNumber(prop) ? prop : index;\n\n            _.extend(this.templates.record, {\n                recordId: prop\n            });\n\n            child = utils.template(template, {\n                collection: this,\n                index: index\n            });\n\n            layout([child]);\n\n            return this;\n        },\n\n        /**\n         * Restore value to default\n         */\n        restoreToDefault: function () {\n            this.recordData(utils.copy(this.default));\n            this.reload();\n        },\n\n        /**\n         * Update whether value differs from default value\n         */\n        setDifferedFromDefault: function () {\n            var recordData = utils.copy(this.recordData());\n\n            Array.isArray(recordData) && recordData.forEach(function (item) {\n                delete item['record_id'];\n            });\n\n            this.isDifferedFromDefault(!_.isEqual(recordData, this.default));\n        },\n\n        /**\n         * Set the changed property if the current page is different\n         * than the default state\n         *\n         * @return void\n         */\n        setChangedForCurrentPage: function () {\n            this.pagesChanged[this.currentPage()] =\n                !compareArrays(this.defaultPagesState[this.currentPage()], this.arrayFilter(this.getChildItems()));\n            this.changed(_.some(this.pagesChanged));\n        }\n    });\n});\n","Magento_Ui/js/dynamic-rows/dynamic-rows-grid.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    './dynamic-rows'\n], function (_, dynamicRows) {\n    'use strict';\n\n    return dynamicRows.extend({\n        defaults: {\n            dataProvider: '',\n            insertData: [],\n            map: null,\n            cacheGridData: [],\n            deleteProperty: false,\n            positionProvider: 'position',\n            dataLength: 0,\n            identificationProperty: 'id',\n            identificationDRProperty: 'id',\n            listens: {\n                'insertData': 'processingInsertData',\n                'recordData': 'initElements setToInsertData'\n            },\n            mappingSettings: {\n                enabled: true,\n                distinct: true\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            this.setToInsertData = _.debounce(this.setToInsertData, 200);\n\n            return this._super();\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'insertData'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Set data from recordData to insertData\n         */\n        setToInsertData: function () {\n            var insertData = [],\n                obj;\n\n            if (this.recordData().length && !this.update) {\n                _.each(this.recordData(), function (recordData) {\n                    obj = {};\n                    obj[this.map[this.identificationProperty]] = recordData[this.identificationProperty];\n                    insertData.push(obj);\n                }, this);\n\n                if (insertData.length) {\n                    this.source.set(this.dataProvider, insertData);\n                }\n            }\n        },\n\n        /**\n         * Initialize children\n         *\n         * @returns {Object} Chainable.\n         */\n        initChildren: function () {\n            this.getChildItems().forEach(function (data, index) {\n                this.processingAddChild(data, this.startIndex + index, data[this.identificationDRProperty]);\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * Initialize elements from grid\n         *\n         * @param {Array} data\n         *\n         * @returns {Object} Chainable.\n         */\n        initElements: function (data) {\n            var newData = this.getNewData(data);\n\n            this.parsePagesData(data);\n\n            if (newData.length) {\n                if (this.insertData().length) {\n                    this.processingAddChild(newData[0], data.length - 1, newData[0][this.identificationProperty]);\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Delete record instance\n         * update data provider dataScope\n         *\n         * @param {String|Number} index - record index\n         * @param {String|Number} recordId\n         */\n        deleteRecord: function (index, recordId) {\n            this.updateInsertData(recordId);\n            this._super();\n        },\n\n        /**\n         * Updates insertData when record is deleted\n         *\n         * @param {String|Number} recordId\n         */\n        updateInsertData: function (recordId) {\n            var data = this.getElementData(this.insertData(), recordId),\n            prop = this.map[this.identificationDRProperty];\n\n            this.insertData(_.reject(this.source.get(this.dataProvider), function (recordData) {\n                return recordData[prop].toString() === data[prop].toString();\n            }, this));\n        },\n\n        /**\n         * Find data object by index\n         *\n         * @param {Array} array - data collection\n         * @param {Number} index - element index\n         * @param {String} property - to find by property\n         *\n         * @returns {Object} data object\n         */\n        getElementData: function (array, index, property) {\n            var obj = {},\n                result;\n\n            property ? obj[property] = index : obj[this.map[this.identificationDRProperty]] = index;\n            result = _.findWhere(array, obj);\n\n            if (!result) {\n                property ?\n                    obj[property] = index.toString() :\n                    obj[this.map[this.identificationDRProperty]] = index.toString();\n            }\n\n            result = _.findWhere(array, obj);\n\n            return result;\n        },\n\n        /**\n         * Processing pages before addChild\n         *\n         * @param {Object} ctx - element context\n         * @param {Number|String} index - element index\n         * @param {Number|String} prop - additional property to element\n         */\n        processingAddChild: function (ctx, index, prop) {\n            if (this._elems.length > this.pageSize) {\n                return false;\n            }\n\n            this.showSpinner(true);\n            this.addChild(ctx, index, prop);\n        },\n\n        /**\n         * Contains old data with new\n         *\n         * @param {Array} data\n         *\n         * @returns {Array} changed data\n         */\n        getNewData: function (data) {\n            var changes = [],\n                tmpObj = {};\n\n            if (data.length !== this.relatedData.length) {\n                _.each(data, function (obj) {\n                    tmpObj[this.identificationDRProperty] = obj[this.identificationDRProperty];\n\n                    if (!_.findWhere(this.relatedData, tmpObj)) {\n                        changes.push(obj);\n                    }\n                }, this);\n            }\n\n            return changes;\n        },\n\n        /**\n         * Processing insert data\n         *\n         * @param {Object} data\n         */\n        processingInsertData: function (data) {\n            var changes,\n                obj = {};\n\n            changes = this._checkGridData(data);\n            this.cacheGridData = data;\n\n            if (changes.length) {\n                obj[this.identificationDRProperty] = changes[0][this.map[this.identificationProperty]];\n\n                if (_.findWhere(this.recordData(), obj)) {\n                    return false;\n                }\n\n                changes.forEach(function (changedObject) {\n                    this.mappingValue(changedObject);\n                }, this);\n            }\n        },\n\n        /**\n         * Mapping value from grid\n         *\n         * @param {Array} data\n         */\n        mappingValue: function (data) {\n            var obj = {},\n                tmpObj = {};\n\n            if (this.mappingSettings.enabled) {\n                _.each(this.map, function (prop, index) {\n                    obj[index] = !_.isUndefined(data[prop]) ? data[prop] : '';\n                }, this);\n            } else {\n                obj = data;\n            }\n\n            if (this.mappingSettings.distinct) {\n                tmpObj[this.identificationDRProperty] = obj[this.identificationDRProperty];\n\n                if (_.findWhere(this.recordData(), tmpObj)) {\n                    return false;\n                }\n            }\n\n            if (!obj.hasOwnProperty(this.positionProvider)) {\n                this.setMaxPosition();\n                obj[this.positionProvider] = this.maxPosition;\n            }\n\n            this.source.set(this.dataScope + '.' + this.index + '.' + this.recordData().length, obj);\n        },\n\n        /**\n         * Check changed records\n         *\n         * @param {Array} data - array with records data\n         * @returns {Array} Changed records\n         */\n        _checkGridData: function (data) {\n            var cacheLength = this.cacheGridData.length,\n                curData = data.length,\n                max = cacheLength > curData ? this.cacheGridData : data,\n                changes = [],\n                obj = {};\n\n            max.forEach(function (record, index) {\n                obj[this.map[this.identificationDRProperty]] = record[this.map[this.identificationDRProperty]];\n\n                if (!_.where(this.cacheGridData, obj).length) {\n                    changes.push(data[index]);\n                }\n            }, this);\n\n            return changes;\n        }\n    });\n});\n","Magento_Ui/js/dynamic-rows/action-delete.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            links: {\n                value: false\n            }\n        },\n\n        /**\n         * Delete record handler.\n         *\n         * @param {Number} index\n         * @param {Number} id\n         */\n        deleteRecord: function (index, id) {\n            this.bubble('deleteRecord', index, id);\n        }\n    });\n});\n","Magento_Ui/js/dynamic-rows/dnd.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'ko',\n    'jquery',\n    'underscore',\n    'uiElement',\n    'Magento_Ui/js/lib/view/utils/async'\n], function (ko, $, _, Element) {\n    'use strict';\n\n    var transformProp;\n\n    /**\n     * Get element context\n     */\n    function getContext(elem) {\n        return ko.contextFor(elem);\n    }\n\n    /**\n     * Defines supported css 'transform' property.\n     *\n     * @returns {String|Undefined}\n     */\n    transformProp = (function () {\n        var style = document.createElement('div').style,\n            base = 'Transform',\n            vendors = ['webkit', 'moz', 'ms', 'o'],\n            vi = vendors.length,\n            property;\n\n        if (typeof style.transform !== 'undefined') {\n            return 'transform';\n        }\n\n        while (vi--) {\n            property = vendors[vi] + base;\n\n            if (typeof style[property] !== 'undefined') {\n                return property;\n            }\n        }\n    })();\n\n    return Element.extend({\n        defaults: {\n            separatorsClass: {\n                top: '_dragover-top',\n                bottom: '_dragover-bottom'\n            },\n            step: 'auto',\n            tableClass: 'table.admin__dynamic-rows',\n            recordsCache: [],\n            draggableElement: {},\n            draggableElementClass: '_dragged',\n            elemPositions: [],\n            listens: {\n                '${ $.recordsProvider }:elems': 'setCacheRecords'\n            },\n            modules: {\n                parentComponent: '${ $.recordsProvider }'\n            }\n        },\n\n        /**\n         * Initialize component\n         *\n         * @returns {Object} Chainable.\n         */\n        initialize: function () {\n            _.bindAll(\n                this,\n                'mousemoveHandler',\n                'mouseupHandler'\n            );\n\n            this._super()\n                .body = $('body');\n\n            return this;\n        },\n\n        /**\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\n         *     properties, calls 'setOptions' passing options to it\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'recordsCache'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Init listens to start drag\n         *\n         * @param {Object} elem - DOM element\n         * @param {Object} data - element data\n         */\n        initListeners: function (elem, data) {\n            $(elem).on('mousedown touchstart', this.mousedownHandler.bind(this, data, elem));\n        },\n\n        /**\n         * Mouse down handler\n         *\n         * @param {Object} data - element data\n         * @param {Object} elem - element\n         * @param {Object} event - key down event\n         */\n        mousedownHandler: function (data, elem, event) {\n            var recordNode = this.getRecordNode(elem),\n                originRecord = $(elem).parents('tr').eq(0),\n                drEl = this.draggableElement,\n                $table = $(elem).parents('table').eq(0),\n                $tableWrapper = $table.parent();\n\n            this.disableScroll();\n            $(recordNode).addClass(this.draggableElementClass);\n            $(originRecord).addClass(this.draggableElementClass);\n            this.step = this.step === 'auto' ? originRecord.height() / 2 : this.step;\n            drEl.originRow = originRecord;\n            drEl.instance = recordNode = this.processingStyles(recordNode, elem);\n            drEl.instanceCtx = this.getRecord(originRecord[0]);\n            drEl.eventMousedownY = this.getPageY(event);\n            drEl.minYpos =\n                $table.offset().top - originRecord.offset().top + $table.children('thead').outerHeight();\n            drEl.maxYpos = drEl.minYpos + $table.children('tbody').outerHeight() - originRecord.outerHeight();\n            $tableWrapper.append(recordNode);\n            this.body.bind('mousemove touchmove', this.mousemoveHandler);\n            this.body.bind('mouseup touchend', this.mouseupHandler);\n        },\n\n        /**\n         * Mouse move handler\n         *\n         * @param {Object} event - mouse move event\n         */\n        mousemoveHandler: function (event) {\n            var depEl = this.draggableElement,\n                pageY = this.getPageY(event),\n                positionY = pageY - depEl.eventMousedownY,\n                processingPositionY = positionY + 'px',\n                processingMaxYpos = depEl.maxYpos + 'px',\n                processingMinYpos = depEl.minYpos + 'px',\n                depElement = this.getDepElement(depEl.instance, positionY, depEl.originRow);\n\n            if (depElement) {\n                depEl.depElement ? depEl.depElement.elem.removeClass(depEl.depElement.className) : false;\n                depEl.depElement = depElement;\n                depEl.depElement.insert !== 'none' ? depEl.depElement.elem.addClass(depElement.className) : false;\n            } else if (depEl.depElement && depEl.depElement.insert !== 'none') {\n                depEl.depElement.elem.removeClass(depEl.depElement.className);\n                depEl.depElement.insert = 'none';\n            }\n\n            if (positionY > depEl.minYpos && positionY < depEl.maxYpos) {\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingPositionY + ')';\n            } else if (positionY < depEl.minYpos) {\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingMinYpos + ')';\n            } else if (positionY >= depEl.maxYpos) {\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingMaxYpos + ')';\n            }\n        },\n\n        /**\n         * Mouse up handler\n         */\n        mouseupHandler: function (event) {\n            var depElementCtx,\n                drEl = this.draggableElement,\n                pageY = this.getPageY(event),\n                positionY = pageY - drEl.eventMousedownY;\n\n            this.enableScroll();\n            drEl.depElement = this.getDepElement(drEl.instance, positionY, this.draggableElement.originRow);\n\n            drEl.instance.remove();\n\n            if (drEl.depElement) {\n                depElementCtx = this.getRecord(drEl.depElement.elem[0]);\n                drEl.depElement.elem.removeClass(drEl.depElement.className);\n\n                if (drEl.depElement.insert !== 'none') {\n                    this.setPosition(drEl.depElement.elem, depElementCtx, drEl);\n                }\n            }\n\n            drEl.originRow.removeClass(this.draggableElementClass);\n\n            this.body.unbind('mousemove touchmove', this.mousemoveHandler);\n            this.body.unbind('mouseup touchend', this.mouseupHandler);\n\n            this.draggableElement = {};\n        },\n\n        /**\n         * Set position to element\n         *\n         * @param {Object} depElem - dep element\n         * @param {Object} depElementCtx - dep element context\n         * @param {Object} dragData - data draggable element\n         */\n        setPosition: function (depElem, depElementCtx, dragData) {\n            var depElemPosition = ~~depElementCtx.position;\n\n            if (dragData.depElement.insert === 'after') {\n                dragData.instanceCtx.position = depElemPosition + 1;\n            } else if (dragData.depElement.insert === 'before') {\n                dragData.instanceCtx.position = depElemPosition;\n            }\n        },\n\n        /**\n         * Get dependency element\n         *\n         * @param {Object} curInstance - current element instance\n         * @param {Number} position\n         * @param {Object} row\n         */\n        getDepElement: function (curInstance, position, row) {\n            var tableSelector = this.tableClass + ' tr',\n                $table = $(row).parents('table').eq(0),\n                $curInstance = $(curInstance),\n                recordsCollection = $table.find('table').length ?\n                    $table.find('tbody > tr').filter(function (index, elem) {\n                        return !$(elem).parents(tableSelector).length;\n                    }) :\n                    $table.find('tbody > tr'),\n                curInstancePositionTop = $curInstance.position().top,\n                curInstancePositionBottom = curInstancePositionTop + $curInstance.height();\n\n            if (position < 0) {\n                return this._getDepElement(recordsCollection, 'before', curInstancePositionTop);\n            } else if (position > 0) {\n                return this._getDepElement(recordsCollection, 'after', curInstancePositionBottom);\n            }\n        },\n\n        /**\n         * Get dependency element private\n         *\n         * @param {Array} collection - record collection\n         * @param {String} position - position to add\n         * @param {Number} dragPosition - position drag element\n         */\n        _getDepElement: function (collection, position, dragPosition) {\n            var rec,\n                rangeEnd,\n                rangeStart,\n                result,\n                className,\n                i = 0,\n                length = collection.length;\n\n            for (i; i < length; i++) {\n                rec = collection.eq(i);\n\n                if (position === 'before') {\n                    rangeStart = collection.eq(i).position().top - this.step;\n                    rangeEnd = rangeStart + this.step * 2;\n                    className = this.separatorsClass.top;\n                } else if (position === 'after') {\n                    rangeEnd = rec.position().top + rec.height() + this.step;\n                    rangeStart = rangeEnd - this.step * 2;\n                    className = this.separatorsClass.bottom;\n                }\n\n                if (dragPosition > rangeStart && dragPosition < rangeEnd) {\n                    result = {\n                        elem: rec,\n                        insert: rec[0] === this.draggableElement.originRow[0] ? 'none' : position,\n                        className: className\n                    };\n                }\n            }\n\n            return result;\n        },\n\n        /**\n         * Set default position of draggable element\n         *\n         * @param {Object} elem - current element instance\n         * @param {Object} data - current element data\n         */\n        _setDefaultPosition: function (elem, data) {\n            var originRecord = $(elem).parents('tr').eq(0),\n                position = originRecord.position();\n\n            ++position.top;\n            $(data).css(position);\n        },\n\n        /**\n         * Set records to cache\n         *\n         * @param {Object} records - record instance\n         */\n        setCacheRecords: function (records) {\n            this.recordsCache(records);\n        },\n\n        /**\n         * Set styles to draggable element\n         *\n         * @param {Object} data - data\n         * @param {Object} elem - elem instance\n         * @returns {Object} instance data.\n         */\n        processingStyles: function (data, elem) {\n            var table = $(elem).parents('table').eq(0),\n                columns = table.find('th'),\n                recordColumns = $(data).find('td');\n\n            this._setDefaultPosition(elem, $(data));\n            this._setColumnsWidth(columns, recordColumns);\n            this._setTableWidth(table, $(data));\n\n            return data;\n        },\n\n        /**\n         * Set table width.\n         *\n         * @param {Object} originalTable - original record instance\n         * @param {Object} recordTable - draggable record instance\n         */\n        _setTableWidth: function (originalTable, recordTable) {\n            recordTable.outerWidth(originalTable.outerWidth());\n        },\n\n        /**\n         * Set columns width.\n         *\n         * @param {Object} originColumns - original record instance\n         * @param {Object} recordColumns - draggable record instance\n         */\n        _setColumnsWidth: function (originColumns, recordColumns) {\n            var i = 0,\n                length = originColumns.length;\n\n            for (i; i < length; i++) {\n                recordColumns.eq(i).outerWidth(originColumns.eq(i).outerWidth());\n            }\n        },\n\n        /**\n         * Get copy original record\n         *\n         * @param {Object} record - original record instance\n         * @returns {Object} draggable record instance\n         */\n        getRecordNode: function (record) {\n            var $record = $(record),\n                table = $record.parents('table')[0].cloneNode(true),\n                $table = $(table);\n\n            $table.find('tr').remove();\n            $table.append($record.parents('tr')[0].cloneNode(true));\n\n            return table;\n        },\n\n        /**\n         * Get record context by element\n         *\n         * @param {Object} elem - original element\n         * @returns {Object} draggable record context\n         */\n        getRecord: function (elem) {\n            var ctx = getContext(elem),\n                index = _.isFunction(ctx.$index) ? ctx.$index() : ctx.$index;\n\n            return this.recordsCache()[index];\n        },\n\n        /**\n         * Get correct page Y\n         *\n         * @param {Object} event - current event\n         * @returns {integer}\n         */\n        getPageY: function (event) {\n            var pageY;\n\n            if (event.type.indexOf('touch') >= 0) {\n                if (event.originalEvent.touches[0]) {\n                    pageY = event.originalEvent.touches[0].pageY;\n                } else {\n                    pageY = event.originalEvent.changedTouches[0].pageY;\n                }\n            } else {\n                pageY = event.pageY;\n            }\n\n            return pageY;\n        },\n\n        /**\n         * Disable page scrolling\n         */\n        disableScroll: function () {\n            document.body.addEventListener('touchmove', this.preventDefault, {\n                passive: false\n            });\n        },\n\n        /**\n         * Enable page scrolling\n         */\n        enableScroll: function () {\n            document.body.removeEventListener('touchmove', this.preventDefault, {\n                passive: false\n            });\n        },\n\n        /**\n         * Prevent default function\n         *\n         * @param {Object} event - event object\n         */\n        preventDefault: function (event) {\n            event.preventDefault();\n        }\n\n    });\n});\n","Magento_Ui/js/timeline/timeline-view.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'ko',\n    'Magento_Ui/js/lib/view/utils/async',\n    'underscore',\n    'Magento_Ui/js/lib/view/utils/raf',\n    'uiRegistry',\n    'uiClass'\n], function (ko, $, _, raf, registry, Class) {\n    'use strict';\n\n    var hasClassList = (function () {\n        var list = document.createElement('_').classList;\n\n        return !!list && !list.toggle('_test', false);\n    })();\n\n    /**\n     * Polyfill of the 'classList.toggle' method.\n     *\n     * @param {HTMLElement} elem\n     */\n    function toggleClass(elem) {\n        var classList   = elem.classList,\n            args        = Array.prototype.slice.call(arguments, 1),\n            $elem;\n\n        if (hasClassList) {\n            classList.toggle.apply(classList, args);\n        } else {\n            $elem = $(elem);\n            $elem.toggleClass.apply($elem, args);\n        }\n    }\n\n    return Class.extend({\n        defaults: {\n            selectors: {\n                content: '.timeline-content',\n                timeUnit: '.timeline-unit',\n                item: '.timeline-item:not([data-role=no-data-msg])',\n                event: '.timeline-event'\n            }\n        },\n\n        /**\n         * Initializes TimelineView component.\n         *\n         * @returns {TimelineView} Chainable.\n         */\n        initialize: function () {\n            _.bindAll(\n                this,\n                'refresh',\n                'initContent',\n                'initItem',\n                'initTimeUnit',\n                'getItemBindings',\n                'updateItemsPosition',\n                'onScaleChange',\n                'onEventElementRender',\n                'onWindowResize',\n                'onContentScroll',\n                'onDataReloaded',\n                'onToStartClick',\n                'onToEndClick'\n            );\n\n            this._super()\n                .initModel()\n                .waitContent();\n\n            return this;\n        },\n\n        /**\n         * Applies listeners for the model properties changes.\n         *\n         * @returns {TimelineView} Chainable.\n         */\n        initModel: function () {\n            var model = registry.get(this.model);\n\n            model.on('scale', this.onScaleChange);\n            model.source.on('reloaded', this.onDataReloaded);\n\n            this.model = model;\n\n            return this;\n        },\n\n        /**\n         * Applies DOM watcher for the\n         * content element rendering.\n         *\n         * @returns {TimelineView} Chainable.\n         */\n        waitContent: function () {\n            $.async({\n                selector: this.selectors.content,\n                component: this.model\n            }, this.initContent);\n\n            return this;\n        },\n\n        /**\n         * Initializes timelines' content element.\n         *\n         * @param {HTMLElement} content\n         * @returns {TimelineView} Chainable.\n         */\n        initContent: function (content) {\n            this.$content = content;\n\n            $(content).on('scroll', this.onContentScroll);\n            $(window).on('resize', this.onWindowResize);\n\n            $.async(this.selectors.item, content, this.initItem);\n            $.async(this.selectors.event, content, this.onEventElementRender);\n            $.async(this.selectors.timeUnit, content, this.initTimeUnit);\n\n            this.refresh();\n\n            return this;\n        },\n\n        /**\n         * Initializes timeline item element,\n         * e.g. establishes event listeners and applies data bindings.\n         *\n         * @param {HTMLElement} elem\n         * @returns {TimelineView} Chainable.\n         */\n        initItem: function (elem) {\n            $(elem)\n                .bindings(this.getItemBindings)\n                .on('click', '._toend', this.onToEndClick)\n                .on('click', '._tostart', this.onToStartClick);\n\n            return this;\n        },\n\n        /**\n         * Initializes timeline unit element.\n         *\n         * @param {HTMLElement} elem\n         * @returns {TimelineView} Chainable.\n         */\n        initTimeUnit: function (elem) {\n            $(elem).bindings(this.getTimeUnitBindings());\n\n            return this;\n        },\n\n        /**\n         * Updates items positions in a\n         * loop if state of a view has changed.\n         */\n        refresh: function () {\n            raf(this.refresh);\n\n            if (this._update) {\n                this._update = false;\n\n                this.updateItemsPosition();\n            }\n        },\n\n        /**\n         * Returns object width additional bindings\n         * for a timeline unit element.\n         *\n         * @returns {Object}\n         */\n        getTimeUnitBindings: function () {\n            return {\n                style: {\n                    width: ko.computed(function () {\n                        return this.getTimeUnitWidth() + '%';\n                    }.bind(this))\n                }\n            };\n        },\n\n        /**\n         * Returns object with additional\n         * bindings for a timeline item element.\n         *\n         * @param {Object} ctx\n         * @returns {Object}\n         */\n        getItemBindings: function (ctx) {\n            return {\n                style: {\n                    width: ko.computed(function () {\n                        return this.getItemWidth(ctx.$row()) + '%';\n                    }.bind(this)),\n\n                    'margin-left': ko.computed(function () {\n                        return this.getItemMargin(ctx.$row()) + '%';\n                    }.bind(this))\n                }\n            };\n        },\n\n        /**\n         * Calculates width in percents of a timeline unit element.\n         *\n         * @returns {Number}\n         */\n        getTimeUnitWidth: function () {\n            return 100 / this.model.scale;\n        },\n\n        /**\n         * Calculates width of a record in percents.\n         *\n         * @param {Object} record\n         * @returns {String}\n         */\n        getItemWidth: function (record) {\n            var days = 0;\n\n            if (record) {\n                days = this.model.getDaysLength(record);\n            }\n\n            return this.getTimeUnitWidth()  * days;\n        },\n\n        /**\n         * Calculates left margin value for provided record.\n         *\n         * @param {Object} record\n         * @returns {String}\n         */\n        getItemMargin: function (record) {\n            var offset = 0;\n\n            if (record) {\n                offset = this.model.getStartDelta(record);\n            }\n\n            return this.getTimeUnitWidth() * offset;\n        },\n\n        /**\n         * Returns collection of currently available\n         * timeline item elements.\n         *\n         * @returns {Array<HTMLElement>}\n         */\n        getItems: function () {\n            var items = this.$content.querySelectorAll(this.selectors.item);\n\n            return _.toArray(items);\n        },\n\n        /**\n         * Updates positions of timeline elements.\n         *\n         * @returns {TimelineView} Chainable.\n         */\n        updateItemsPosition: function () {\n            this.getItems()\n                .forEach(this.updatePositionFor, this);\n\n            return this;\n        },\n\n        /**\n         * Updates position of provided timeline element.\n         *\n         * @param {HTMLElement} $elem\n         * @returns {TimelineView} Chainable.\n         */\n        updatePositionFor: function ($elem) {\n            var $event      = $elem.querySelector(this.selectors.event),\n                leftEdge    = this.getLeftEdgeFor($elem),\n                rightEdge   = this.getRightEdgeFor($elem);\n\n            if ($event) {\n                $event.style.left = Math.max(-leftEdge, 0) + 'px';\n                $event.style.right = Math.max(rightEdge, 0) + 'px';\n            }\n\n            toggleClass($elem, '_scroll-start', leftEdge < 0);\n            toggleClass($elem, '_scroll-end', rightEdge > 0);\n\n            return this;\n        },\n\n        /**\n         * Scrolls content area to the start of provided element.\n         *\n         * @param {HTMLElement} elem\n         * @returns {TimelineView}\n         */\n        toStartOf: function (elem) {\n            var leftEdge = this.getLeftEdgeFor(elem);\n\n            this.$content.scrollLeft += leftEdge;\n\n            return this;\n        },\n\n        /**\n         * Scrolls content area to the end of provided element.\n         *\n         * @param {HTMLElement} elem\n         * @returns {TimelineView}\n         */\n        toEndOf: function (elem) {\n            var rightEdge = this.getRightEdgeFor(elem);\n\n            this.$content.scrollLeft += rightEdge + 1;\n\n            return this;\n        },\n\n        /**\n         * Calculates location of the left edge of an element\n         * relative to the contents' left edge.\n         *\n         * @param {HTMLElement} elem\n         * @returns {Number}\n         */\n        getLeftEdgeFor: function (elem) {\n            var leftOffset = elem.getBoundingClientRect().left;\n\n            return leftOffset - this.$content.getBoundingClientRect().left;\n        },\n\n        /**\n         * Calculates location of the right edge of an element\n         * relative to the contents' right edge.\n         *\n         * @param {HTMLElement} elem\n         * @returns {Number}\n         */\n        getRightEdgeFor: function (elem) {\n            var elemWidth   = elem.offsetWidth,\n                leftEdge    = this.getLeftEdgeFor(elem);\n\n            return leftEdge + elemWidth - this.$content.offsetWidth;\n        },\n\n        /**\n         * 'To Start' button 'click' event handler.\n         *\n         * @param {jQueryEvent} event\n         */\n        onToStartClick: function (event) {\n            var elem = event.originalEvent.currentTarget;\n\n            event.stopPropagation();\n\n            this.toStartOf(elem);\n        },\n\n        /**\n         * 'To End' button 'click' event handler.\n         *\n         * @param {jQueryEvent} event\n         */\n        onToEndClick: function (event) {\n            var elem = event.originalEvent.currentTarget;\n\n            event.stopPropagation();\n\n            this.toEndOf(elem);\n        },\n\n        /**\n         * Handler of the scale value 'change' event.\n         */\n        onScaleChange: function () {\n            this._update = true;\n        },\n\n        /**\n         * Callback function which is invoked\n         * when event element was rendered.\n         */\n        onEventElementRender: function () {\n            this._update = true;\n        },\n\n        /**\n         * Window 'resize' event handler.\n         */\n        onWindowResize: function () {\n            this._update = true;\n        },\n\n        /**\n         * Content container 'scroll' event handler.\n         */\n        onContentScroll: function () {\n            this._update = true;\n        },\n\n        /**\n         * Data 'reload' event handler.\n         */\n        onDataReloaded: function () {\n            this._update = true;\n        }\n    });\n});\n","Magento_Ui/js/timeline/timeline.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'underscore',\n    'moment',\n    'uiLayout',\n    'Magento_Ui/js/grid/listing'\n], function (_, moment, layout, Listing) {\n    'use strict';\n\n    var ONE_DAY = 86400000;\n\n    return Listing.extend({\n        defaults: {\n            recordTmpl: 'ui/timeline/record',\n            dateFormat: 'YYYY-MM-DD HH:mm:ss',\n            headerFormat: 'ddd MM/DD',\n            detailsFormat: 'DD/MM/YYYY HH:mm:ss',\n            scale: 7,\n            scaleStep: 1,\n            minScale: 7,\n            maxScale: 28,\n            minDays: 28,\n            displayMode: 'timeline',\n            displayModes: {\n                timeline: {\n                    label: 'Timeline',\n                    value: 'timeline',\n                    template: 'ui/timeline/timeline'\n                }\n            },\n            viewConfig: {\n                component: 'Magento_Ui/js/timeline/timeline-view',\n                name: '${ $.name }_view',\n                model: '${ $.name }'\n            },\n            tracks: {\n                scale: true\n            },\n            statefull: {\n                scale: true\n            },\n            range: {}\n        },\n\n        /**\n         * Initializes Timeline component.\n         *\n         * @returns {Timeline} Chainable.\n         */\n        initialize: function () {\n            this._super()\n                .initView()\n                .updateRange();\n\n            return this;\n        },\n\n        /**\n         * Initializes components configuration.\n         *\n         * @returns {Timeline} Chainable.\n         */\n        initConfig: function () {\n            this._super();\n\n            this.maxScale = Math.min(this.minDays, this.maxScale);\n            this.minScale = Math.min(this.maxScale, this.minScale);\n\n            return this;\n        },\n\n        /**\n         * Initializes observable properties.\n         *\n         * @returns {Timeline} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe.call(this.range, true, 'hasToday');\n\n            return this;\n        },\n\n        /**\n         * Initializes TimelineView component.\n         *\n         * @returns {Timeline} Chainable.\n         */\n        initView: function () {\n            layout([this.viewConfig]);\n\n            return this;\n        },\n\n        /**\n         * Checks if provided event record is active,\n         * i.e. it has already started.\n         *\n         * @param {Object} record\n         * @returns {Boolean}\n         */\n        isActive: function (record) {\n            return Number(record.status) === 1;\n        },\n\n        /**\n         * Checks if provided event record is upcoming,\n         * i.e. it will start later on.\n         *\n         * @param {Object} record\n         * @returns {Boolean}\n         */\n        isUpcoming: function (record) {\n            return Number(record.status) === 2;\n        },\n\n        /**\n         * Checks if provided event record is permanent,\n         * i.e. it has no ending time.\n         *\n         * @param {Object} record\n         * @returns {Boolean}\n         */\n        isPermanent: function (record) {\n            return !this.getEndDate(record);\n        },\n\n        /**\n         * Checks if provided date indicates current day.\n         *\n         * @param {(Number|Moment)} date\n         * @returns {Boolenan}\n         */\n        isToday: function (date) {\n            return moment().isSame(date, 'day');\n        },\n\n        /**\n         * Checks if range object contains todays date.\n         *\n         * @returns {Boolean}\n         */\n        hasToday: function () {\n            return this.range.hasToday;\n        },\n\n        /**\n         * Returns start date of provided record.\n         *\n         * @param {Object} record\n         * @returns {String}\n         */\n        getStartDate: function (record) {\n            return record['start_time'];\n        },\n\n        /**\n         * Returns end date of provided record.\n         *\n         * @param {Object} record\n         * @returns {String}\n         */\n        getEndDate: function (record) {\n            return record['end_time'];\n        },\n\n        /**\n         * Returns difference in days between records' start date\n         * and a first day of a range.\n         *\n         * @param {Object} record\n         * @returns {Number}\n         */\n        getStartDelta: function (record) {\n            var start    = this.createDate(this.getStartDate(record)),\n                firstDay = this.range.firstDay;\n\n            return start.diff(firstDay, 'days', true);\n        },\n\n        /**\n         * Calculates the amount of days that provided event lasts.\n         *\n         * @param {Object} record\n         * @returns {Number}\n         */\n        getDaysLength: function (record) {\n            var start   = this.createDate(this.getStartDate(record)),\n                end     = this.createDate(this.getEndDate(record));\n\n            if (!end.isValid()) {\n                end = this.range.lastDay.endOf('day');\n            }\n\n            return end.diff(start, 'days', true);\n        },\n\n        /**\n         * Creates new date object based on provided date string value.\n         *\n         * @param {String} dateStr\n         * @returns {Moment}\n         */\n        createDate: function (dateStr) {\n            return moment(dateStr, this.dateFormat);\n        },\n\n        /**\n         * Converts days to weeks.\n         *\n         * @param {Number} days\n         * @returns {Number}\n         */\n        daysToWeeks: function (days) {\n            var weeks = days / 7;\n\n            if (weeks % 1) {\n                weeks = weeks.toFixed(1);\n            }\n\n            return weeks;\n        },\n\n        /**\n         * Updates data of a range object,\n         * e.g. total days, first day and last day, etc.\n         *\n         * @returns {Object} Range instance.\n         */\n        updateRange: function () {\n            var firstDay    = this._getFirstDay(),\n                lastDay     = this._getLastDay(),\n                totalDays   = lastDay.diff(firstDay, 'days'),\n                days        = [],\n                i           = -1;\n\n            if (totalDays < this.minDays) {\n                totalDays += this.minDays - totalDays - 1;\n            }\n\n            while (++i <= totalDays) {\n                days.push(+firstDay + ONE_DAY * i);\n            }\n\n            return _.extend(this.range, {\n                days:       days,\n                totalDays:  totalDays,\n                firstDay:   firstDay,\n                lastDay:    moment(_.last(days)),\n                hasToday:   this.isToday(firstDay)\n            });\n        },\n\n        /**\n         *\n         * @private\n         * @param {String} key\n         * @returns {Array<Moment>}\n         */\n        _getDates: function (key) {\n            var dates = [];\n\n            this.rows.forEach(function (record) {\n                if (record[key]) {\n                    dates.push(this.createDate(record[key]));\n                }\n            }, this);\n\n            return dates;\n        },\n\n        /**\n         * Returns date which is closest to the current day.\n         *\n         * @private\n         * @returns {Moment}\n         */\n        _getFirstDay: function () {\n            var dates = this._getDates('start_time'),\n                first = moment.min(dates).subtract(1, 'day'),\n                today = moment();\n\n            if (!first.isValid() || first < today) {\n                first = today;\n            }\n\n            return first.startOf('day');\n        },\n\n        /**\n         * Returns the most distant date\n         * specified in available records.\n         *\n         * @private\n         * @returns {Moment}\n         */\n        _getLastDay: function () {\n            var startDates  = this._getDates('start_time'),\n                endDates    = this._getDates('end_time'),\n                last        = moment.max(startDates.concat(endDates));\n\n            return last.add(1, 'day').startOf('day');\n        },\n\n        /**\n         * TODO: remove after integration with date binding.\n         *\n         * @param {Number} timestamp\n         * @returns {String}\n         */\n        formatHeader: function (timestamp) {\n            return moment(timestamp).format(this.headerFormat);\n        },\n\n        /**\n         * TODO: remove after integration with date binding.\n         *\n         * @param {String} date\n         * @returns {String}\n         */\n        formatDetails: function (date) {\n            return moment(date).format(this.detailsFormat);\n        }\n    });\n});\n","Magento_Ui/js/model/messages.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'ko',\n    'uiClass'\n], function (ko, Class) {\n    'use strict';\n\n    return Class.extend({\n        /** @inheritdoc */\n        initialize: function () {\n            this._super()\n                .initObservable();\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this.errorMessages = ko.observableArray([]);\n            this.successMessages = ko.observableArray([]);\n\n            return this;\n        },\n\n        /**\n         * Add  message to list.\n         * @param {Object} messageObj\n         * @param {Object} type\n         * @returns {Boolean}\n         */\n        add: function (messageObj, type) {\n            var expr = /([%])\\w+/g,\n                message;\n\n            if (!messageObj.hasOwnProperty('parameters')) {\n                this.clear();\n                type.push(messageObj.message);\n\n                return true;\n            }\n            message = messageObj.message.replace(expr, function (varName) {\n                varName = varName.substr(1);\n\n                if (messageObj.parameters.hasOwnProperty(varName)) {\n                    return messageObj.parameters[varName];\n                }\n\n                return messageObj.parameters.shift();\n            });\n            this.clear();\n            type.push(message);\n\n            return true;\n        },\n\n        /**\n         * Add success message.\n         *\n         * @param {Object} message\n         * @return {*|Boolean}\n         */\n        addSuccessMessage: function (message) {\n            return this.add(message, this.successMessages);\n        },\n\n        /**\n         * Add error message.\n         *\n         * @param {Object} message\n         * @return {*|Boolean}\n         */\n        addErrorMessage: function (message) {\n            return this.add(message, this.errorMessages);\n        },\n\n        /**\n         * Get error messages.\n         *\n         * @return {Array}\n         */\n        getErrorMessages: function () {\n            return this.errorMessages;\n        },\n\n        /**\n         * Get success messages.\n         *\n         * @return {Array}\n         */\n        getSuccessMessages: function () {\n            return this.successMessages;\n        },\n\n        /**\n         * Checks if an instance has stored messages.\n         *\n         * @return {Boolean}\n         */\n        hasMessages: function () {\n            return this.errorMessages().length > 0 || this.successMessages().length > 0;\n        },\n\n        /**\n         * Removes stored messages.\n         */\n        clear: function () {\n            this.errorMessages.removeAll();\n            this.successMessages.removeAll();\n        }\n    });\n});\n","Magento_Ui/js/model/messageList.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    './messages'\n], function (Messages) {\n    'use strict';\n\n    return new Messages();\n});\n","Magento_Ui/js/modal/modal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'underscore',\n    'mage/template',\n    'text!ui/template/modal/modal-popup.html',\n    'text!ui/template/modal/modal-slide.html',\n    'text!ui/template/modal/modal-custom.html',\n    'Magento_Ui/js/lib/key-codes',\n    'jquery/ui',\n    'mage/translate'\n], function ($, _, template, popupTpl, slideTpl, customTpl, keyCodes) {\n    'use strict';\n\n    /**\n     * Detect browser transition end event.\n     * @return {String|undefined} - transition event.\n     */\n    var transitionEvent =  (function () {\n        var transition,\n            elementStyle = document.createElement('div').style,\n            transitions = {\n                'transition': 'transitionend',\n                'OTransition': 'oTransitionEnd',\n                'MozTransition': 'transitionend',\n                'WebkitTransition': 'webkitTransitionEnd'\n            };\n\n        for (transition in transitions) {\n            if (elementStyle[transition] !== undefined && transitions.hasOwnProperty(transition)) {\n                return transitions[transition];\n            }\n        }\n    })();\n\n    /**\n     * Modal Window Widget\n     */\n    $.widget('mage.modal', {\n        options: {\n            id: null,\n            type: 'popup',\n            title: '',\n            subTitle: '',\n            modalClass: '',\n            focus: '[data-role=\"closeBtn\"]',\n            autoOpen: false,\n            clickableOverlay: true,\n            popupTpl: popupTpl,\n            slideTpl: slideTpl,\n            customTpl: customTpl,\n            modalVisibleClass: '_show',\n            parentModalClass: '_has-modal',\n            innerScrollClass: '_inner-scroll',\n            responsive: false,\n            innerScroll: false,\n            modalTitle: '[data-role=\"title\"]',\n            modalSubTitle: '[data-role=\"subTitle\"]',\n            modalBlock: '[data-role=\"modal\"]',\n            modalCloseBtn: '[data-role=\"closeBtn\"]',\n            modalContent: '[data-role=\"content\"]',\n            modalAction: '[data-role=\"action\"]',\n            focusableScope: '[data-role=\"focusable-scope\"]',\n            focusableStart: '[data-role=\"focusable-start\"]',\n            focusableEnd: '[data-role=\"focusable-end\"]',\n            appendTo: 'body',\n            wrapperClass: 'modals-wrapper',\n            overlayClass: 'modals-overlay',\n            responsiveClass: 'modal-slide',\n            trigger: '',\n            modalLeftMargin: 45,\n            closeText: $.mage.__('Close'),\n            buttons: [{\n                text: $.mage.__('Ok'),\n                class: '',\n                attr: {},\n\n                /**\n                 * Default action on button click\n                 */\n                click: function (event) {\n                    this.closeModal(event);\n                }\n            }],\n            keyEventHandlers: {\n\n                /**\n                 * Tab key press handler,\n                 * set focus to elements\n                 */\n                tabKey: function () {\n                    if (document.activeElement === this.modal[0]) {\n                        this._setFocus('start');\n                    }\n                },\n\n                /**\n                 * Escape key press handler,\n                 * close modal window\n                 * @param {Object} event - event\n                 */\n                escapeKey: function (event) {\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\n                        this.closeModal(event);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Creates modal widget.\n         */\n        _create: function () {\n            _.bindAll(\n                this,\n                'keyEventSwitcher',\n                '_tabSwitcher',\n                'closeModal'\n            );\n\n            this.options.id = this.uuid;\n            this.options.transitionEvent = transitionEvent;\n            this._createWrapper();\n            this._renderModal();\n            this._createButtons();\n            $(this.options.trigger).on('click', _.bind(this.toggleModal, this));\n            this._on(this.modal.find(this.options.modalCloseBtn), {\n                'click': this.options.modalCloseBtnHandler ? this.options.modalCloseBtnHandler : this.closeModal\n            });\n            this._on(this.element, {\n                'openModal': this.openModal,\n                'closeModal': this.closeModal\n            });\n            this.options.autoOpen ? this.openModal() : false;\n        },\n\n        /**\n         * Returns element from modal node.\n         * @return {Object} - element.\n         */\n        _getElem: function (elem) {\n            return this.modal.find(elem);\n        },\n\n        /**\n         * Gets visible modal count.\n         * * @return {Number} - visible modal count.\n         */\n        _getVisibleCount: function () {\n            var modals = this.modalWrapper.find(this.options.modalBlock);\n\n            return modals.filter('.' + this.options.modalVisibleClass).length;\n        },\n\n        /**\n         * Gets count of visible modal by slide type.\n         * * @return {Number} - visible modal count.\n         */\n        _getVisibleSlideCount: function () {\n            var elems = this.modalWrapper.find('[data-type=\"slide\"]');\n\n            return elems.filter('.' + this.options.modalVisibleClass).length;\n        },\n\n        /**\n         * Listener key events.\n         * Call handler function if it exists\n         */\n        keyEventSwitcher: function (event) {\n            var key = keyCodes[event.keyCode];\n\n            if (this.options.keyEventHandlers.hasOwnProperty(key)) {\n                this.options.keyEventHandlers[key].apply(this, arguments);\n            }\n        },\n\n        /**\n         * Set title for modal.\n         *\n         * @param {String} title\n         */\n        setTitle: function (title) {\n            var $title = $(this.options.modalTitle),\n                $subTitle = this.modal.find(this.options.modalSubTitle);\n\n            $title.text(title);\n            $title.append($subTitle);\n        },\n\n        /**\n         * Set sub title for modal.\n         *\n         * @param {String} subTitle\n         */\n        setSubTitle: function (subTitle) {\n            this.options.subTitle = subTitle;\n            this.modal.find(this.options.modalSubTitle).html(subTitle);\n        },\n\n        /**\n         * Toggle modal.\n         * * @return {Element} - current element.\n         */\n        toggleModal: function () {\n            if (this.options.isOpen === true) {\n                this.closeModal();\n            } else {\n                this.openModal();\n            }\n        },\n\n        /**\n         * Open modal.\n         * * @return {Element} - current element.\n         */\n        openModal: function () {\n            this.options.isOpen = true;\n            this.focussedElement = document.activeElement;\n            this._createOverlay();\n            this._setActive();\n            this._setKeyListener();\n            this.modal.one(this.options.transitionEvent, _.bind(this._setFocus, this, 'end', 'opened'));\n            this.modal.one(this.options.transitionEvent, _.bind(this._trigger, this, 'opened'));\n            this.modal.addClass(this.options.modalVisibleClass);\n\n            if (!this.options.transitionEvent) {\n                this._trigger('opened');\n            }\n\n            return this.element;\n        },\n\n        /**\n         * Set focus to element.\n         * @param {String} position - can be \"start\" and \"end\"\n         *      positions.\n         *      If position is \"end\" - sets focus to first\n         *      focusable element in modal window scope.\n         *      If position is \"start\" - sets focus to last\n         *      focusable element in modal window scope\n         *\n         *  @param {String} type - can be \"opened\" or false\n         *      If type is \"opened\" - looks to \"this.options.focus\"\n         *      property and sets focus\n         */\n        _setFocus: function (position, type) {\n            var focusableElements,\n                infelicity;\n\n            if (type === 'opened' && this.options.focus) {\n                this.modal.find($(this.options.focus)).focus();\n            } else if (type === 'opened' && !this.options.focus) {\n                this.modal.find(this.options.focusableScope).focus();\n            } else if (position === 'end') {\n                this.modal.find(this.options.modalCloseBtn).focus();\n            } else if (position === 'start') {\n                infelicity = 2; //Constant for find last focusable element\n                focusableElements = this.modal.find(':focusable');\n                focusableElements.eq(focusableElements.length - infelicity).focus();\n            }\n        },\n\n        /**\n         * Set events listener when modal is opened.\n         */\n        _setKeyListener: function () {\n            this.modal.find(this.options.focusableStart).bind('focusin', this._tabSwitcher);\n            this.modal.find(this.options.focusableEnd).bind('focusin', this._tabSwitcher);\n            this.modal.bind('keydown', this.keyEventSwitcher);\n        },\n\n        /**\n         * Remove events listener when modal is closed.\n         */\n        _removeKeyListener: function () {\n            this.modal.find(this.options.focusableStart).unbind('focusin', this._tabSwitcher);\n            this.modal.find(this.options.focusableEnd).unbind('focusin', this._tabSwitcher);\n            this.modal.unbind('keydown', this.keyEventSwitcher);\n        },\n\n        /**\n         * Switcher for focus event.\n         * @param {Object} e - event\n         */\n        _tabSwitcher: function (e) {\n            var target = $(e.target);\n\n            if (target.is(this.options.focusableStart)) {\n                this._setFocus('start');\n            } else if (target.is(this.options.focusableEnd)) {\n                this._setFocus('end');\n            }\n        },\n\n        /**\n         * Close modal.\n         * * @return {Element} - current element.\n         */\n        closeModal: function () {\n            var that = this;\n\n            this._removeKeyListener();\n            this.options.isOpen = false;\n            this.modal.one(this.options.transitionEvent, function () {\n                that._close();\n            });\n            this.modal.removeClass(this.options.modalVisibleClass);\n\n            if (!this.options.transitionEvent) {\n                that._close();\n            }\n\n            return this.element;\n        },\n\n        /**\n         * Helper for closeModal function.\n         */\n        _close: function () {\n            var trigger = _.bind(this._trigger, this, 'closed', this.modal);\n\n            $(this.focussedElement).focus();\n            this._destroyOverlay();\n            this._unsetActive();\n            _.defer(trigger, this);\n        },\n\n        /**\n         * Set z-index and margin for modal and overlay.\n         */\n        _setActive: function () {\n            var zIndex = this.modal.zIndex(),\n                baseIndex = zIndex + this._getVisibleCount();\n\n            if (this.modal.data('active')) {\n                return;\n            }\n\n            this.modal.data('active', true);\n\n            this.overlay.zIndex(++baseIndex);\n            this.prevOverlayIndex = this.overlay.zIndex();\n            this.modal.zIndex(this.overlay.zIndex() + 1);\n\n            if (this._getVisibleSlideCount()) {\n                this.modal.css('marginLeft', this.options.modalLeftMargin * this._getVisibleSlideCount());\n            }\n        },\n\n        /**\n         * Unset styles for modal and set z-index for previous modal.\n         */\n        _unsetActive: function () {\n            this.modal.removeAttr('style');\n            this.modal.data('active', false);\n\n            if (this.overlay) {\n                this.overlay.zIndex(this.prevOverlayIndex - 1);\n            }\n        },\n\n        /**\n         * Creates wrapper to hold all modals.\n         */\n        _createWrapper: function () {\n            this.modalWrapper = $(this.options.appendTo).find('.' + this.options.wrapperClass);\n\n            if (!this.modalWrapper.length) {\n                this.modalWrapper = $('<div></div>')\n                    .addClass(this.options.wrapperClass)\n                    .appendTo(this.options.appendTo);\n            }\n        },\n\n        /**\n         * Compile template and append to wrapper.\n         */\n        _renderModal: function () {\n            $(template(\n                this.options[this.options.type + 'Tpl'],\n                {\n                    data: this.options\n                })).appendTo(this.modalWrapper);\n            this.modal = this.modalWrapper.find(this.options.modalBlock).last();\n            this.element.appendTo(this._getElem(this.options.modalContent));\n\n            if (this.element.is(':hidden')) {\n                this.element.show();\n            }\n        },\n\n        /**\n         * Creates buttons pane.\n         */\n        _createButtons: function () {\n            this.buttons = this._getElem(this.options.modalAction);\n            _.each(this.options.buttons, function (btn, key) {\n                var button = this.buttons[key];\n\n                if (btn.attr) {\n                    $(button).attr(btn.attr);\n                }\n\n                if (btn.class) {\n                    $(button).addClass(btn.class);\n                }\n\n                if (!btn.click) {\n                    btn.click = this.closeModal;\n                }\n                $(button).on('click', _.bind(btn.click, this));\n            }, this);\n        },\n\n        /**\n         * Creates overlay, append it to wrapper, set previous click event on overlay.\n         */\n        _createOverlay: function () {\n            var events,\n                outerClickHandler = this.options.outerClickHandler || this.closeModal;\n\n            this.overlay = $('.' + this.options.overlayClass);\n\n            if (!this.overlay.length) {\n                $(this.options.appendTo).addClass(this.options.parentModalClass);\n                this.overlay = $('<div></div>')\n                    .addClass(this.options.overlayClass)\n                    .appendTo(this.modalWrapper);\n            }\n            events = $._data(this.overlay.get(0), 'events');\n            events ? this.prevOverlayHandler = events.click[0].handler : false;\n            this.options.clickableOverlay ? this.overlay.unbind().on('click', outerClickHandler) : false;\n        },\n\n        /**\n         * Destroy overlay.\n         */\n        _destroyOverlay: function () {\n            if (this._getVisibleCount()) {\n                this.overlay.unbind().on('click', this.prevOverlayHandler);\n            } else {\n                $(this.options.appendTo).removeClass(this.options.parentModalClass);\n                this.overlay.remove();\n                this.overlay = null;\n            }\n        }\n    });\n\n    return $.mage.modal;\n});\n","Magento_Ui/js/modal/prompt.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'underscore',\n    'mage/template',\n    'text!ui/template/modal/modal-prompt-content.html',\n    'jquery/ui',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function ($, _, template, promptContentTmpl) {\n    'use strict';\n\n    $.widget('mage.prompt', $.mage.modal, {\n        options: {\n            modalClass: 'prompt',\n            promptContentTmpl: promptContentTmpl,\n            promptField: '[data-role=\"promptField\"]',\n            attributesForm: {},\n            attributesField: {},\n            value: '',\n            validation: false,\n            validationRules: [],\n            actions: {\n\n                /**\n                 * Callback always - called on all actions.\n                 */\n                always: function () {},\n\n                /**\n                 * Callback confirm.\n                 */\n                confirm: function () {},\n\n                /**\n                 * Callback cancel.\n                 */\n                cancel: function () {}\n            },\n            buttons: [{\n                text: $.mage.__('Cancel'),\n                class: 'action-secondary action-dismiss',\n\n                /**\n                 * Click handler.\n                 */\n                click: function () {\n                    this.closeModal();\n                }\n            }, {\n                text: $.mage.__('OK'),\n                class: 'action-primary action-accept',\n\n                /**\n                 * Click handler.\n                 */\n                click: function () {\n                    this.closeModal(true);\n                }\n            }]\n        },\n\n        /**\n         * Create widget.\n         */\n        _create: function () {\n            this.options.focus = this.options.promptField;\n            this.options.validation = this.options.validation && this.options.validationRules.length;\n            this._super();\n            this.modal.find(this.options.modalContent).append(this.getFormTemplate());\n            this.modal.find(this.options.modalCloseBtn).off().on('click',  _.bind(this.closeModal, this, false));\n\n            if (this.options.validation) {\n                this.setValidationClasses();\n            }\n\n            this.openModal();\n        },\n\n        /**\n         * Form template getter.\n         *\n         * @returns {Object} Form template.\n         */\n        getFormTemplate: function () {\n            var formTemplate,\n                formAttr = '',\n                inputAttr = '',\n                attributeName;\n\n            for (attributeName in this.options.attributesForm) {\n                if (this.options.attributesForm.hasOwnProperty(attributeName)) {\n                    formAttr = formAttr + ' ' + attributeName + '=\"' +\n                        this.options.attributesForm[attributeName] + '\"';\n                }\n            }\n\n            for (attributeName in this.options.attributesField) {\n                if (this.options.attributesField.hasOwnProperty(attributeName)) {\n                    inputAttr = inputAttr + ' ' + attributeName + '=\"' +\n                        this.options.attributesField[attributeName] + '\"';\n                }\n            }\n\n            formTemplate = $(template(this.options.promptContentTmpl, {\n                data: this.options,\n                formAttr: formAttr,\n                inputAttr: inputAttr\n            }));\n\n            return formTemplate;\n        },\n\n        /**\n         * Remove widget\n         */\n        _remove: function () {\n            this.modal.remove();\n        },\n\n        /**\n         * Validate prompt field\n         */\n        validate: function () {\n            return $.validator.validateSingleElement(this.options.promptField);\n        },\n\n        /**\n         * Add validation classes to prompt field\n         */\n        setValidationClasses: function () {\n            this.modal.find(this.options.promptField).attr('class', $.proxy(function (i, val) {\n                return val + ' ' + this.options.validationRules.join(' ');\n            }, this));\n        },\n\n        /**\n         * Open modal window\n         */\n        openModal: function () {\n            this._super();\n            this.modal.find(this.options.promptField).val(this.options.value);\n        },\n\n        /**\n         * Close modal window\n         */\n        closeModal: function (result) {\n            var value;\n\n            if (result) {\n                if (this.options.validation && !this.validate()) {\n                    return false;\n                }\n\n                value = this.modal.find(this.options.promptField).val();\n                this.options.actions.confirm.call(this, value);\n            } else {\n                this.options.actions.cancel.call(this, result);\n            }\n\n            this.options.actions.always();\n            this.element.bind('promptclosed', _.bind(this._remove, this));\n\n            return this._super();\n        }\n    });\n\n    return function (config) {\n        return $('<div class=\"prompt-message\"></div>').html(config.content).prompt(config);\n    };\n});\n","Magento_Ui/js/modal/confirm.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'underscore',\n    'mage/translate',\n    'jquery/ui',\n    'Magento_Ui/js/modal/modal'\n], function ($, _, $t) {\n    'use strict';\n\n    $.widget('mage.confirm', $.mage.modal, {\n        options: {\n            modalClass: 'confirm',\n            title: '',\n            focus: '.action-accept',\n            actions: {\n\n                /**\n                 * Callback always - called on all actions.\n                 */\n                always: function () {},\n\n                /**\n                 * Callback confirm.\n                 */\n                confirm: function () {},\n\n                /**\n                 * Callback cancel.\n                 */\n                cancel: function () {}\n            },\n            buttons: [{\n                text: $t('Cancel'),\n                class: 'action-secondary action-dismiss',\n\n                /**\n                 * Click handler.\n                 */\n                click: function (event) {\n                    this.closeModal(event);\n                }\n            }, {\n                text: $t('OK'),\n                class: 'action-primary action-accept',\n\n                /**\n                 * Click handler.\n                 */\n                click: function (event) {\n                    this.closeModal(event, true);\n                }\n            }]\n        },\n\n        /**\n         * Create widget.\n         */\n        _create: function () {\n            this._super();\n            this.modal.find(this.options.modalCloseBtn).off().on('click', _.bind(this.closeModal, this));\n            this.openModal();\n        },\n\n        /**\n         * Remove modal window.\n         */\n        _remove: function () {\n            this.modal.remove();\n        },\n\n        /**\n         * Open modal window.\n         */\n        openModal: function () {\n            return this._super();\n        },\n\n        /**\n         * Close modal window.\n         */\n        closeModal: function (event, result) {\n            result = result || false;\n\n            if (result) {\n                this.options.actions.confirm(event);\n            } else {\n                this.options.actions.cancel(event);\n            }\n            this.options.actions.always(event);\n            this.element.bind('confirmclosed', _.bind(this._remove, this));\n\n            return this._super();\n        }\n    });\n\n    return function (config) {\n        return $('<div></div>').html(config.content).confirm(config);\n    };\n});\n","Magento_Ui/js/modal/alert.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'underscore',\n    'jquery/ui',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function ($, _) {\n    'use strict';\n\n    $.widget('mage.alert', $.mage.confirm, {\n        options: {\n            modalClass: 'confirm',\n            title: $.mage.__('Attention'),\n            actions: {\n\n                /**\n                 * Callback always - called on all actions.\n                 */\n                always: function () {}\n            },\n            buttons: [{\n                text: $.mage.__('OK'),\n                class: 'action-primary action-accept',\n\n                /**\n                 * Click handler.\n                 */\n                click: function () {\n                    this.closeModal(true);\n                }\n            }]\n        },\n\n        /**\n         * Close modal window.\n         */\n        closeModal: function () {\n            this.options.actions.always();\n            this.element.bind('alertclosed', _.bind(this._remove, this));\n\n            return this._super();\n        }\n    });\n\n    return function (config) {\n        return $('<div></div>').html(config.content).alert(config);\n    };\n});\n","Magento_Ui/js/modal/modalToggle.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/modal'\n], function ($) {\n    'use strict';\n\n    return function (config, el) {\n        var widget,\n            content;\n\n        if (config.contentSelector) {\n            content = $(config.contentSelector);\n        } else if (config.content) {\n            content = $('<div />').html(config.content);\n        } else {\n            content = $('<div />');\n        }\n\n        widget = content.modal(config);\n\n        $(el).on(config.toggleEvent, function () {\n            var state = widget.data('mage-modal').options.isOpen;\n\n            if (state) {\n                widget.modal('closeModal');\n            } else {\n                widget.modal('openModal');\n            }\n\n            return false;\n        });\n\n        return widget;\n    };\n});\n","Magento_Ui/js/modal/modal-component.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/lib/view/utils/async',\n    'uiCollection',\n    'uiRegistry',\n    'underscore',\n    './modal'\n], function ($, Collection, registry, _) {\n    'use strict';\n\n    return Collection.extend({\n        defaults: {\n            template: 'ui/modal/modal-component',\n            title: '',\n            subTitle: '',\n            options: {\n                modalClass: '',\n                title: '',\n                subTitle: '',\n                buttons: [],\n                keyEventHandlers: {}\n            },\n            valid: true,\n            links: {\n                title: 'options.title',\n                subTitle: 'options.subTitle'\n            },\n            listens: {\n                state: 'onState',\n                title: 'setTitle',\n                'options.subTitle': 'setSubTitle'\n            },\n            modalClass: 'modal-component',\n            onCancel: 'closeModal'\n        },\n\n        /**\n         * Initializes component.\n         *\n         * @returns {Object} Chainable.\n         */\n        initialize: function () {\n            this._super();\n            _.bindAll(this,\n                'initModal',\n                'openModal',\n                'closeModal',\n                'toggleModal',\n                'setPrevValues',\n                'validate');\n            this.initializeContent();\n\n            return this;\n        },\n\n        /**\n         * Initializes modal configuration\n         *\n         * @returns {Object} Chainable.\n         */\n        initConfig: function () {\n            return this._super()\n                .initSelector()\n                .initModalEvents();\n        },\n\n        /**\n         * Configure modal selector\n         *\n         * @returns {Object} Chainable.\n         */\n        initSelector: function () {\n            var modalClass = this.name.replace(/\\./g, '_');\n\n            this.contentSelector = '.' + this.modalClass;\n            this.options.modalClass = this.options.modalClass + ' ' + modalClass;\n            this.rootSelector = '.' + modalClass;\n\n            return this;\n        },\n\n        /**\n         * Configure modal keyboard handlers\n         * and outer click\n         *\n         * @returns {Object} Chainable.\n         */\n        initModalEvents: function () {\n            this.options.keyEventHandlers.escapeKey = this.options.outerClickHandler = this[this.onCancel].bind(this);\n\n            return this;\n        },\n\n        /**\n         * Initialize modal's content components\n         */\n        initializeContent: function () {\n            $.async({\n                component: this.name\n            }, this.initModal);\n        },\n\n        /**\n         * Init toolbar section so other components will be able to place something in it\n         */\n        initToolbarSection: function () {\n            this.set('toolbarSection', this.modal.data('mage-modal').modal.find('header').get(0));\n        },\n\n        /**\n         * Initializes observable properties.\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super();\n            this.observe(['state', 'focused']);\n\n            return this;\n        },\n\n        /**\n         * Wrap content in a modal of certain type\n         *\n         * @param {HTMLElement} element\n         * @returns {Object} Chainable.\n         */\n        initModal: function (element) {\n            if (!this.modal) {\n                this.overrideModalButtonCallback();\n                this.options.modalCloseBtnHandler = this[this.onCancel].bind(this);\n                this.modal = $(element).modal(this.options);\n                this.initToolbarSection();\n\n                if (this.waitCbk) {\n                    this.waitCbk();\n                    this.waitCbk = null;\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Open modal\n         */\n        openModal: function () {\n            if (this.modal) {\n                this.state(true);\n            } else {\n                this.waitCbk = this.openModal;\n            }\n        },\n\n        /**\n         * Close modal\n         */\n        closeModal: function () {\n            if (this.modal) {\n                this.state(false);\n            } else {\n                this.waitCbk = this.closeModal;\n            }\n        },\n\n        /**\n         * Toggle modal\n         */\n        toggleModal: function () {\n            if (this.modal) {\n                this.state(!this.state());\n            } else {\n                this.waitCbk = this.toggleModal;\n            }\n        },\n\n        /**\n         * Sets title for modal\n         *\n         * @param {String} title\n         */\n        setTitle: function (title) {\n            if (this.title !== title) {\n                this.title = title;\n            }\n\n            if (this.modal) {\n                this.modal.modal('setTitle', title);\n            }\n        },\n\n        /**\n         * Sets subTitle for modal\n         *\n         * @param {String} subTitle\n         */\n        setSubTitle: function (subTitle) {\n            if (this.subTitle !== subTitle) {\n                this.subTitle = subTitle;\n            }\n\n            if (this.modal) {\n                this.modal.modal('setSubTitle', subTitle);\n            }\n        },\n\n        /**\n         * Wrap content in a modal of certain type\n         *\n         * @param {Boolean} state\n         */\n        onState: function (state) {\n            if (state) {\n                this.modal.modal('openModal');\n                this.applyData();\n            } else {\n                this.modal.modal('closeModal');\n            }\n        },\n\n        /**\n         * Validate everything validatable in modal\n         */\n        validate: function (elem) {\n            if (typeof elem === 'undefined') {\n                return;\n            }\n\n            if (typeof elem.validate === 'function') {\n                this.valid = this.valid & elem.validate().valid;\n            } else if (elem.elems) {\n                elem.elems().forEach(this.validate, this);\n            }\n        },\n\n        /**\n         * Reset data from provider\n         */\n        resetData: function () {\n            this.elems().forEach(this.resetValue, this);\n        },\n\n        /**\n         * Update 'applied' property with data from modal content\n         */\n        applyData: function () {\n            var applied = {};\n\n            this.elems().forEach(this.gatherValues.bind(this, applied), this);\n            this.applied = applied;\n        },\n\n        /**\n         * Gather values from modal content\n         *\n         * @param {Array} applied\n         * @param {HTMLElement} elem\n         */\n        gatherValues: function (applied, elem) {\n            if (typeof elem.value === 'function') {\n                applied[elem.name] = elem.value();\n            } else if (elem.elems) {\n                elem.elems().forEach(this.gatherValues.bind(this, applied), this);\n            }\n        },\n\n        /**\n         * Set to previous values from modal content\n         *\n         * @param {HTMLElement} elem\n         */\n        setPrevValues: function (elem) {\n            if (typeof elem.value === 'function') {\n                this.modal.focus();\n                elem.value(this.applied[elem.name]);\n            } else if (elem.elems) {\n                elem.elems().forEach(this.setPrevValues, this);\n            }\n        },\n\n        /**\n         * Triggers some method in every modal child elem, if this method is defined\n         *\n         * @param {Object} action - action configuration,\n         * must contain actionName and targetName and\n         * can contain params\n         */\n        triggerAction: function (action) {\n            var targetName = action.targetName,\n                params = action.params || [],\n                actionName = action.actionName,\n                target;\n\n            target = registry.async(targetName);\n\n            if (target && typeof target === 'function' && actionName) {\n                params.unshift(actionName);\n                target.apply(target, params);\n            }\n        },\n\n        /**\n         * Override modal buttons callback placeholders with real callbacks\n         */\n        overrideModalButtonCallback: function () {\n            var buttons = this.options.buttons;\n\n            if (buttons && buttons.length) {\n                buttons.forEach(function (button) {\n                    button.click = this.getButtonClickHandler(button.actions);\n                }, this);\n            }\n        },\n\n        /**\n         * Generate button click handler based on button's 'actions' configuration\n         */\n        getButtonClickHandler: function (actionsConfig) {\n            var actions = actionsConfig.map(\n                function (actionConfig) {\n                    if (_.isObject(actionConfig)) {\n                        return this.triggerAction.bind(this, actionConfig);\n                    }\n\n                    return this[actionConfig] ? this[actionConfig].bind(this) : function () {};\n                }, this);\n\n            return function () {\n                actions.forEach(\n                    function (action) {\n                        action();\n                    }\n                );\n            };\n        },\n\n        /**\n         * Cancels changes in modal:\n         * returning elems values to the previous state,\n         * and close modal\n         */\n        actionCancel: function () {\n            this.elems().forEach(this.setPrevValues, this);\n            this.closeModal();\n        },\n\n        /**\n         * Accept changes in modal by not preventing them.\n         * Can be extended by exporting 'gatherValues' result somewhere\n         */\n        actionDone: function () {\n            this.valid = true;\n            this.elems().forEach(this.validate, this);\n\n            if (this.valid) {\n                this.closeModal();\n            }\n        }\n    });\n});\n","Magento_Ui/js/view/messages.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'ko',\n    'jquery',\n    'uiComponent',\n    '../model/messageList'\n], function (ko, $, Component, globalMessages) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_Ui/messages',\n            selector: '[data-role=checkout-messages]',\n            isHidden: false,\n            listens: {\n                isHidden: 'onHiddenChange'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function (config, messageContainer) {\n            this._super()\n                .initObservable();\n\n            this.messageContainer = messageContainer || config.messageContainer || globalMessages;\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe('isHidden');\n\n            return this;\n        },\n\n        /**\n         * Checks visibility.\n         *\n         * @return {Boolean}\n         */\n        isVisible: function () {\n            return this.isHidden(this.messageContainer.hasMessages());\n        },\n\n        /**\n         * Remove all messages.\n         */\n        removeAll: function () {\n            this.messageContainer.clear();\n        },\n\n        /**\n         * @param {Boolean} isHidden\n         */\n        onHiddenChange: function (isHidden) {\n            var self = this;\n\n            // Hide message block if needed\n            if (isHidden) {\n                setTimeout(function () {\n                    $(self.selector).hide('blind', {}, 500);\n                }, 5000);\n            }\n        }\n    });\n});\n","Magepow_Productzoom/js/plugins/jquery.elevatezoom.js":"/*\n *\tjQuery elevateZoom 3.0.8\n *\tDemo's and documentation:\n *\twww.elevateweb.co.uk/image-zoom\n *\n *\tCopyright (c) 2012 Andrew Eades\n *\twww.elevateweb.co.uk\n *\n *\tDual licensed under the GPL and MIT licenses.\n *\thttp://en.wikipedia.org/wiki/MIT_License\n *\thttp://en.wikipedia.org/wiki/GNU_General_Public_License\n *\n\n/*\n *\tjQuery elevateZoom 3.0.3\n *\tDemo's and documentation:\n *\twww.elevateweb.co.uk/image-zoom\n *\n *\tCopyright (c) 2012 Andrew Eades\n *\twww.elevateweb.co.uk\n *\n *\tDual licensed under the GPL and MIT licenses.\n *\thttp://en.wikipedia.org/wiki/MIT_License\n *\thttp://en.wikipedia.org/wiki/GNU_General_Public_License\n */\n\n\nif ( typeof Object.create !== 'function' ) {\n\tObject.create = function( obj ) {\n\t\tfunction F() {};\n\t\tF.prototype = obj;\n\t\treturn new F();\n\t};\n}\n\n(function( $, window, document, undefined ) {\n\tvar ElevateZoom = {\n\t\t\tinit: function( options, elem ) {\n\t\t\t\tvar self = this;\n\n\t\t\t\tself.elem = elem;\n\t\t\t\tself.$elem = $( elem );\n\n\t\t\t\tself.imageSrc = self.$elem.data(\"zoom-image\") ? self.$elem.data(\"zoom-image\") : self.$elem.attr(\"src\");\n\n\t\t\t\tself.options = $.extend( {}, $.fn.elevateZoom.options, options );\n\n\t\t\t\t//TINT OVERRIDE SETTINGS\n\t\t\t\tif(self.options.tint) {\n\t\t\t\t\tself.options.lensColour = \"none\", //colour of the lens background\n\t\t\t\t\tself.options.lensOpacity =  \"1\" //opacity of the lens\n\t\t\t\t}\n\t\t\t\t//INNER OVERRIDE SETTINGS\n\t\t\t\tif(self.options.zoomType == \"inner\") {self.options.showLens = false;}\n\n\n\t\t\t\t//Remove alt on hover\n\n\t\t\t\tself.$elem.parent().removeAttr('title').removeAttr('alt');\n\n\t\t\t\tself.zoomImage = self.imageSrc;\n\n\t\t\t\tself.refresh( 1 );\n\n\n\n\t\t\t\t//Create the image swap from the gallery \n\t\t\t\t$('#'+self.options.gallery + ' a').click( function(e) { \n\n\t\t\t\t\t//Set a class on the currently active gallery image\n\t\t\t\t\tif(self.options.galleryActiveClass){\n\t\t\t\t\t\t$('#'+self.options.gallery + ' a').removeClass(self.options.galleryActiveClass);\n\t\t\t\t\t\t$(this).addClass(self.options.galleryActiveClass);\n\t\t\t\t\t}\n\t\t\t\t\t//stop any link on the a tag from working\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t//call the swap image function            \n\t\t\t\t\tif($(this).data(\"zoom-image\")){self.zoomImagePre = $(this).data(\"zoom-image\")}\n\t\t\t\t\telse{self.zoomImagePre = $(this).data(\"image\");}\n\t\t\t\t\tself.swaptheimage($(this).data(\"image\"), self.zoomImagePre);\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t},\n\n\t\t\trefresh: function( length ) {\n\t\t\t\tvar self = this;\n\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tself.fetch(self.imageSrc);\n\n\t\t\t\t}, length || self.options.refresh );\n\t\t\t},\n\n\t\t\tfetch: function(imgsrc) {\n\t\t\t\t//get the image\n\t\t\t\tvar self = this;\n\t\t\t\tvar newImg = new Image();\n\t\t\t\tnewImg.onload = function() {\n\t\t\t\t\t//set the large image dimensions - used to calculte ratio's\n\t\t\t\t\tself.largeWidth = newImg.width;\n\t\t\t\t\tself.largeHeight = newImg.height;\n\t\t\t\t\t//once image is loaded start the calls\n\t\t\t\t\tself.startZoom();\n\t\t\t\t\tself.currentImage = self.imageSrc;\n\t\t\t\t\t//let caller know image has been loaded\n\t\t\t\t\tself.options.onZoomedImageLoaded(self.$elem);\n\t\t\t\t}\n\t\t\t\tnewImg.src = imgsrc; // this must be done AFTER setting onload\n\n\t\t\t\treturn;\n\n\t\t\t},\n\n\t\t\tstartZoom: function( ) {\n\t\t\t\tvar self = this;\n\t\t\t\t//get dimensions of the non zoomed image\n\t\t\t\tself.nzWidth = self.$elem.width();\n\t\t\t\tself.nzHeight = self.$elem.height();\n\n\t\t\t\t//activated elements\n\t\t\t\tself.isWindowActive = false;\n\t\t\t\tself.isLensActive = false;\n\t\t\t\tself.isTintActive = false;\n\t\t\t\tself.overWindow = false;    \n\n\t\t\t\t//CrossFade Wrappe\n\t\t\t\tif(self.options.imageCrossfade){\n\t\t\t\t\tself.zoomWrap = self.$elem.wrap('<div style=\"height:'+self.nzHeight+'px;width:'+self.nzWidth+'px;\" class=\"zoomWrapper\" />');        \n\t\t\t\t\tself.$elem.css('position', 'absolute'); \n\t\t\t\t}\n\n\t\t\t\tself.zoomLock = 1;\n\t\t\t\tself.scrollingLock = false;\n\t\t\t\tself.changeBgSize = false;\n\t\t\t\tself.currentZoomLevel = self.options.zoomLevel;\n\n\n\t\t\t\t//get offset of the non zoomed image\n\t\t\t\tself.nzOffset = self.$elem.offset();\n\t\t\t\t//calculate the width ratio of the large/small image\n\t\t\t\tself.widthRatio = (self.largeWidth/self.currentZoomLevel) / self.nzWidth;\n\t\t\t\tself.heightRatio = (self.largeHeight/self.currentZoomLevel) / self.nzHeight; \n\n\n\t\t\t\t//if window zoom        \n\t\t\t\tif(self.options.zoomType == \"window\") {\n\t\t\t\t\tself.zoomWindowStyle = \"overflow: hidden;\"\n\t\t\t\t\t\t+ \"background-position: 0px 0px;text-align:center;\"  \n\t\t\t\t\t\t+ \"background-color: \" + String(self.options.zoomWindowBgColour)            \n\t\t\t\t\t\t+ \";width: \" + String(self.options.zoomWindowWidth) + \"px;\"\n\t\t\t\t\t\t+ \"height: \" + String(self.options.zoomWindowHeight)\n\t\t\t\t\t\t+ \"px;float: left;\"\n\t\t\t\t\t\t+ \"background-size: \"+ self.largeWidth/self.currentZoomLevel+ \"px \" +self.largeHeight/self.currentZoomLevel + \"px;\"\n\t\t\t\t\t\t+ \"display: none;z-index:100;\"\n\t\t\t\t\t\t+ \"border: \" + String(self.options.borderSize) \n\t\t\t\t\t\t+ \"px solid \" + self.options.borderColour \n\t\t\t\t\t\t+ \";background-repeat: no-repeat;\"\n\t\t\t\t\t\t+ \"position: absolute;\";\n\t\t\t\t}    \n\n\n\t\t\t\t//if inner  zoom    \n\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\t//has a border been put on the image? Lets cater for this\n\n\t\t\t\t\tvar borderWidth = self.$elem.css(\"border-left-width\");\n\n\t\t\t\t\tself.zoomWindowStyle = \"overflow: hidden;\"\n\t\t\t\t\t\t+ \"margin-left: \" + String(borderWidth) + \";\" \n\t\t\t\t\t\t+ \"margin-top: \" + String(borderWidth) + \";\"         \n\t\t\t\t\t\t+ \"background-position: 0px 0px;\"\n\t\t\t\t\t\t+ \"width: \" + String(self.nzWidth) + \"px;\"\n\t\t\t\t\t\t+ \"height: \" + String(self.nzHeight)\n\t\t\t\t\t\t+ \"px;float: left;\"\n\t\t\t\t\t\t+ \"display: none;\"\n\t\t\t\t\t\t+ \"cursor:\"+(self.options.cursor)+\";\"\n\t\t\t\t\t\t+ \"px solid \" + self.options.borderColour \n\t\t\t\t\t\t+ \";background-repeat: no-repeat;\"\n\t\t\t\t\t\t+ \"position: absolute;\";\n\t\t\t\t}    \n\n\n\n\t\t\t\t//lens style for window zoom\n\t\t\t\tif(self.options.zoomType == \"window\") {\n\n\n\t\t\t\t\t// adjust images less than the window height\n\n\t\t\t\t\tif(self.nzHeight < self.options.zoomWindowWidth/self.widthRatio){\n\t\t\t\t\t\tlensHeight = self.nzHeight;              \n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlensHeight = String((self.options.zoomWindowHeight/self.heightRatio))\n\t\t\t\t\t}\n\t\t\t\t\tif(self.largeWidth < self.options.zoomWindowWidth){\n\t\t\t\t\t\tlensWidth = self.nzWidth;\n\t\t\t\t\t}       \n\t\t\t\t\telse{\n\t\t\t\t\t\tlensWidth =  (self.options.zoomWindowWidth/self.widthRatio);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tself.lensStyle = \"background-position: 0px 0px;width: \" + String((self.options.zoomWindowWidth)/self.widthRatio) + \"px;height: \" + String((self.options.zoomWindowHeight)/self.heightRatio)\n\t\t\t\t\t+ \"px;float: right;display: none;\"\n\t\t\t\t\t+ \"overflow: hidden;\"\n\t\t\t\t\t+ \"z-index: 999;\"   \n\t\t\t\t\t+ \"-webkit-transform: translateZ(0);\"               \n\t\t\t\t\t+ \"opacity:\"+(self.options.lensOpacity)+\";filter: alpha(opacity = \"+(self.options.lensOpacity*100)+\"); zoom:1;\"\n\t\t\t\t\t+ \"width:\"+lensWidth+\"px;\"\n\t\t\t\t\t+ \"height:\"+lensHeight+\"px;\"\n\t\t\t\t\t+ \"background-color:\"+(self.options.lensColour)+\";\"\t\t\t\t\t\n\t\t\t\t\t+ \"cursor:\"+(self.options.cursor)+\";\"\n\t\t\t\t\t+ \"border: \"+(self.options.lensBorderSize)+\"px\" +\n\t\t\t\t\t\" solid \"+(self.options.lensBorderColour)+\";background-repeat: no-repeat;position: absolute;\";\n\t\t\t\t} \n\n\n\t\t\t\t//tint style\n\t\t\t\tself.tintStyle = \"display: block;\"\n\t\t\t\t\t+ \"position: absolute;\"\n\t\t\t\t\t+ \"background-color: \"+self.options.tintColour+\";\"\t\n\t\t\t\t\t+ \"filter:alpha(opacity=0);\"\t\t\n\t\t\t\t\t+ \"opacity: 0;\"\t\n\t\t\t\t\t+ \"width: \" + self.nzWidth + \"px;\"\n\t\t\t\t\t+ \"height: \" + self.nzHeight + \"px;\"\n\n\t\t\t\t\t;\n\n\t\t\t\t//lens style for lens zoom with optional round for modern browsers\n\t\t\t\tself.lensRound = '';\n\n\t\t\t\tif(self.options.zoomType == \"lens\") {\n\n\t\t\t\t\tself.lensStyle = \"background-position: 0px 0px;\"\n\t\t\t\t\t\t+ \"float: left;display: none;\"\n\t\t\t\t\t\t+ \"border: \" + String(self.options.borderSize) + \"px solid \" + self.options.borderColour+\";\"\n\t\t\t\t\t\t+ \"width:\"+ String(self.options.lensSize) +\"px;\"\n\t\t\t\t\t\t+ \"height:\"+ String(self.options.lensSize)+\"px;\"\n\t\t\t\t\t\t+ \"background-repeat: no-repeat;position: absolute;\";\n\n\n\t\t\t\t}\n\n\n\t\t\t\t//does not round in all browsers\n\t\t\t\tif(self.options.lensShape == \"round\") {\n\t\t\t\t\tself.lensRound = \"border-top-left-radius: \" + String(self.options.lensSize / 2 + self.options.borderSize) + \"px;\"\n\t\t\t\t\t+ \"border-top-right-radius: \" + String(self.options.lensSize / 2 + self.options.borderSize) + \"px;\"\n\t\t\t\t\t+ \"border-bottom-left-radius: \" + String(self.options.lensSize / 2 + self.options.borderSize) + \"px;\"\n\t\t\t\t\t+ \"border-bottom-right-radius: \" + String(self.options.lensSize / 2 + self.options.borderSize) + \"px;\";\n\n\t\t\t\t}\n\n\t\t\t\t//create the div's                                                + \"\"\n\t\t\t\t//self.zoomContainer = $('<div/>').addClass('zoomContainer').css({\"position\":\"relative\", \"height\":self.nzHeight, \"width\":self.nzWidth});\n\n\t\t\t\tself.zoomContainer = $('<div class=\"zoomContainer\" style=\"-webkit-transform: translateZ(0);position:absolute;left:'+self.nzOffset.left+'px;top:'+self.nzOffset.top+'px;height:'+self.nzHeight+'px;width:'+self.nzWidth+'px;\"></div>');\n\t\t\t\t$('body').append(self.zoomContainer);\t\n\n\n\t\t\t\t//this will add overflow hidden and contrain the lens on lens mode       \n\t\t\t\tif(self.options.containLensZoom && self.options.zoomType == \"lens\"){\n\t\t\t\t\tself.zoomContainer.css(\"overflow\", \"hidden\");\n\t\t\t\t}\n\t\t\t\tif(self.options.zoomType != \"inner\") {\n\t\t\t\t\tself.zoomLens = $(\"<div class='zoomLens' style='\" + self.lensStyle + self.lensRound +\"'>&nbsp;</div>\")\n\t\t\t\t\t.appendTo(self.zoomContainer)\n\t\t\t\t\t.click(function () {\n\t\t\t\t\t\tself.$elem.trigger('click');\n\t\t\t\t\t});\n\n\n\t\t\t\t\tif(self.options.tint) {\n\t\t\t\t\t\tself.tintContainer = $('<div/>').addClass('tintContainer');\t\n\t\t\t\t\t\tself.zoomTint = $(\"<div class='zoomTint' style='\"+self.tintStyle+\"'></div>\");\n\n\n\t\t\t\t\t\tself.zoomLens.wrap(self.tintContainer);\n\n\n\t\t\t\t\t\tself.zoomTintcss = self.zoomLens.after(self.zoomTint);\t\n\n\t\t\t\t\t\t//if tint enabled - set an image to show over the tint\n\n\t\t\t\t\t\tself.zoomTintImage = $('<img style=\"position: absolute; left: 0px; top: 0px; max-width: none; width: '+self.nzWidth+'px; height: '+self.nzHeight+'px;\" src=\"'+self.imageSrc+'\">')\n\t\t\t\t\t\t.appendTo(self.zoomLens)\n\t\t\t\t\t\t.click(function () {\n\n\t\t\t\t\t\t\tself.$elem.trigger('click');\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}          \n\n\t\t\t\t}\n\n\n\n\n\n\n\n\t\t\t\t//create zoom window \n\t\t\t\tif(isNaN(self.options.zoomWindowPosition)){\n\t\t\t\t\tself.zoomWindow = $(\"<div style='z-index:999;left:\"+(self.windowOffsetLeft)+\"px;top:\"+(self.windowOffsetTop)+\"px;\" + self.zoomWindowStyle + \"' class='zoomWindow'>&nbsp;</div>\")\n\t\t\t\t\t.appendTo('body')\n\t\t\t\t\t.click(function () {\n\t\t\t\t\t\tself.$elem.trigger('click');\n\t\t\t\t\t});\n\t\t\t\t}else{\n\t\t\t\t\tself.zoomWindow = $(\"<div style='z-index:999;left:\"+(self.windowOffsetLeft)+\"px;top:\"+(self.windowOffsetTop)+\"px;\" + self.zoomWindowStyle + \"' class='zoomWindow'>&nbsp;</div>\")\n\t\t\t\t\t.appendTo(self.zoomContainer)\n\t\t\t\t\t.click(function () {\n\t\t\t\t\t\tself.$elem.trigger('click');\n\t\t\t\t\t});\n\t\t\t\t}              \n\t\t\t\tself.zoomWindowContainer = $('<div/>').addClass('zoomWindowContainer').css(\"width\",self.options.zoomWindowWidth);\n\t\t\t\tself.zoomWindow.wrap(self.zoomWindowContainer);\n\n\n\t\t\t\t//  self.captionStyle = \"text-align: left;background-color: black;color: white;font-weight: bold;padding: 10px;font-family: sans-serif;font-size: 11px\";                                                                                                                                                                                                                                          \n\t\t\t\t// self.zoomCaption = $('<div class=\"elevatezoom-caption\" style=\"'+self.captionStyle+'display: block; width: 280px;\">INSERT ALT TAG</div>').appendTo(self.zoomWindow.parent());\n\n\t\t\t\tif(self.options.zoomType == \"lens\") {\n\t\t\t\t\tself.zoomLens.css({ backgroundImage: \"url('\" + self.imageSrc + \"')\" }); \n\t\t\t\t}\n\t\t\t\tif(self.options.zoomType == \"window\") {\n\t\t\t\t\tself.zoomWindow.css({ backgroundImage: \"url('\" + self.imageSrc + \"')\" }); \n\t\t\t\t}\n\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\tself.zoomWindow.css({ backgroundImage: \"url('\" + self.imageSrc + \"')\" }); \n\t\t\t\t}\n\t\t\t\t/*-------------------END THE ZOOM WINDOW AND LENS----------------------------------*/\n\t\t\t\t//touch events\n\t\t\t\tself.$elem.bind('touchmove', function(e){    \n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tvar touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];  \n\t\t\t\t\tself.setPosition(touch);\n\n\t\t\t\t});  \n\t\t\t\tself.zoomContainer.bind('touchmove', function(e){ \n\t\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\t\tself.showHideWindow(\"show\");\n\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tvar touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];  \n\t\t\t\t\tself.setPosition(touch); \n\n\t\t\t\t});  \t\n\t\t\t\tself.zoomContainer.bind('touchend', function(e){ \n\t\t\t\t\tself.showHideWindow(\"hide\");\n\t\t\t\t\tif(self.options.showLens) {self.showHideLens(\"hide\");}\n\t\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {self.showHideTint(\"hide\");}\n\t\t\t\t});  \t\n\n\t\t\t\tself.$elem.bind('touchend', function(e){ \n\t\t\t\t\tself.showHideWindow(\"hide\");\n\t\t\t\t\tif(self.options.showLens) {self.showHideLens(\"hide\");}\n\t\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {self.showHideTint(\"hide\");}\n\t\t\t\t});  \t\n\t\t\t\tif(self.options.showLens) {\n\t\t\t\t\tself.zoomLens.bind('touchmove', function(e){ \n\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tvar touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];  \n\t\t\t\t\t\tself.setPosition(touch); \n\t\t\t\t\t});    \n\n\n\t\t\t\t\tself.zoomLens.bind('touchend', function(e){ \n\t\t\t\t\t\tself.showHideWindow(\"hide\");\n\t\t\t\t\t\tif(self.options.showLens) {self.showHideLens(\"hide\");}\n\t\t\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {self.showHideTint(\"hide\");}\n\t\t\t\t\t});  \n\t\t\t\t}\n\t\t\t\t//Needed to work in IE\n\t\t\t\tself.$elem.bind('mousemove', function(e){   \n\t\t\t\t\tif(self.overWindow == false){self.setElements(\"show\");}\n\t\t\t\t\t//make sure on orientation change the setposition is not fired\n\t\t\t\t\tif(self.lastX !== e.clientX || self.lastY !== e.clientY){\n\t\t\t\t\t\tself.setPosition(e);\n\t\t\t\t\t\tself.currentLoc = e;\n\t\t\t\t\t}   \n\t\t\t\t\tself.lastX = e.clientX;\n\t\t\t\t\tself.lastY = e.clientY;    \n\n\t\t\t\t});  \t\n\n\t\t\t\tself.zoomContainer.bind('mousemove', function(e){ \n\n\t\t\t\t\tif(self.overWindow == false){self.setElements(\"show\");} \n\n\t\t\t\t\t//make sure on orientation change the setposition is not fired \n\t\t\t\t\tif(self.lastX !== e.clientX || self.lastY !== e.clientY){\n\t\t\t\t\t\tself.setPosition(e);\n\t\t\t\t\t\tself.currentLoc = e;\n\t\t\t\t\t}   \n\t\t\t\t\tself.lastX = e.clientX;\n\t\t\t\t\tself.lastY = e.clientY;    \n\t\t\t\t});  \t\n\t\t\t\tif(self.options.zoomType != \"inner\") {\n\t\t\t\t\tself.zoomLens.bind('mousemove', function(e){      \n\t\t\t\t\t\t//make sure on orientation change the setposition is not fired\n\t\t\t\t\t\tif(self.lastX !== e.clientX || self.lastY !== e.clientY){\n\t\t\t\t\t\t\tself.setPosition(e);\n\t\t\t\t\t\t\tself.currentLoc = e;\n\t\t\t\t\t\t}   \n\t\t\t\t\t\tself.lastX = e.clientX;\n\t\t\t\t\t\tself.lastY = e.clientY;    \n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {\n\t\t\t\t\tself.zoomTint.bind('mousemove', function(e){ \n\t\t\t\t\t\t//make sure on orientation change the setposition is not fired\n\t\t\t\t\t\tif(self.lastX !== e.clientX || self.lastY !== e.clientY){\n\t\t\t\t\t\t\tself.setPosition(e);\n\t\t\t\t\t\t\tself.currentLoc = e;\n\t\t\t\t\t\t}   \n\t\t\t\t\t\tself.lastX = e.clientX;\n\t\t\t\t\t\tself.lastY = e.clientY;    \n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\tself.zoomWindow.bind('mousemove', function(e) {\n\t\t\t\t\t\t//self.overWindow = true;\n\t\t\t\t\t\t//make sure on orientation change the setposition is not fired\n\t\t\t\t\t\tif(self.lastX !== e.clientX || self.lastY !== e.clientY){\n\t\t\t\t\t\t\tself.setPosition(e);\n\t\t\t\t\t\t\tself.currentLoc = e;\n\t\t\t\t\t\t}   \n\t\t\t\t\t\tself.lastX = e.clientX;\n\t\t\t\t\t\tself.lastY = e.clientY;    \n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\t//  lensFadeOut: 500,  zoomTintFadeIn\n\t\t\t\tself.zoomContainer.add(self.$elem).mouseenter(function(){\n\n\t\t\t\t\tif(self.overWindow == false){self.setElements(\"show\");} \n\n\n\t\t\t\t}).mouseleave(function(){\n\t\t\t\t\tif(!self.scrollLock){\n\t\t\t\t\t\tself.setElements(\"hide\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t//end ove image\n\n\n\n\n\n\t\t\t\tif(self.options.zoomType != \"inner\") {\n\t\t\t\t\tself.zoomWindow.mouseenter(function(){\n\t\t\t\t\t\tself.overWindow = true;   \n\t\t\t\t\t\tself.setElements(\"hide\");                  \n\t\t\t\t\t}).mouseleave(function(){\n\n\t\t\t\t\t\tself.overWindow = false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t//end ove image\n\n\n\n//\t\t\t\tvar delta = parseInt(e.originalEvent.wheelDelta || -e.originalEvent.detail);\n\n\t\t\t\t//      $(this).empty();    \n\t\t\t\t//    return false;\n\n\t\t\t\t//fix for initial zoom setting\n\t\t\t\tif (self.options.zoomLevel != 1){\n\t\t\t\t\t//\tself.changeZoomLevel(self.currentZoomLevel);\n\t\t\t\t}\n\t\t\t\t//set the min zoomlevel\n\t\t\t\tif(self.options.minZoomLevel){\n\t\t\t\t\tself.minZoomLevel = self.options.minZoomLevel;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tself.minZoomLevel = self.options.scrollZoomIncrement * 2;\n\t\t\t\t}\n\n\n\t\t\t\tif(self.options.scrollZoom){\n\n\n\t\t\t\t\tself.zoomContainer.add(self.$elem).bind('mousewheel DOMMouseScroll MozMousePixelScroll', function(e){\n\n\n//\t\t\t\t\t\tin IE there is issue with firing of mouseleave - So check whether still scrolling\n//\t\t\t\t\t\tand on mouseleave check if scrolllock          \n\t\t\t\t\t\tself.scrollLock = true;\n\t\t\t\t\t\tclearTimeout($.data(this, 'timer'));\n\t\t\t\t\t\t$.data(this, 'timer', setTimeout(function() {\n\t\t\t\t\t\t\tself.scrollLock = false;\n\t\t\t\t\t\t\t//do something\n\t\t\t\t\t\t}, 250));\n\n\t\t\t\t\t\tvar theEvent = e.originalEvent.wheelDelta || e.originalEvent.detail*-1\n\n\n\t\t\t\t\t\t//this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;\n\t\t\t\t\t\t//   e.preventDefault();\n\n\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\te.preventDefault();\n\n\n\t\t\t\t\t\tif(theEvent /120 > 0) {\n\t\t\t\t\t\t\t//scrolling up\n\t\t\t\t\t\t\tif(self.currentZoomLevel >= self.minZoomLevel){ \n\t\t\t\t\t\t\t\tself.changeZoomLevel(self.currentZoomLevel-self.options.scrollZoomIncrement);        \n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t//scrolling down\n\n\n\t\t\t\t\t\t\tif(self.options.maxZoomLevel){\n\t\t\t\t\t\t\t\tif(self.currentZoomLevel <= self.options.maxZoomLevel){           \n\t\t\t\t\t\t\t\t\tself.changeZoomLevel(parseFloat(self.currentZoomLevel)+self.options.scrollZoomIncrement);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t//andy \n\n\t\t\t\t\t\t\t\tself.changeZoomLevel(parseFloat(self.currentZoomLevel)+self.options.scrollZoomIncrement);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\n\t\t\t},\n\t\t\tsetElements: function(type) {\n\t\t\t\tvar self = this;\n        if(!self.options.zoomEnabled){return false;}\n\t\t\t\tif(type==\"show\"){\n\t\t\t\t\tif(self.isWindowSet){\n\t\t\t\t\t\tif(self.options.zoomType == \"inner\") {self.showHideWindow(\"show\");}\n\t\t\t\t\t\tif(self.options.zoomType == \"window\") {self.showHideWindow(\"show\");}\n\t\t\t\t\t\tif(self.options.showLens) {self.showHideLens(\"show\");}\n\t\t\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {self.showHideTint(\"show\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(type==\"hide\"){\n\t\t\t\t\tif(self.options.zoomType == \"window\") {self.showHideWindow(\"hide\");}\n\t\t\t\t\tif(!self.options.tint) {self.showHideWindow(\"hide\");}\n\t\t\t\t\tif(self.options.showLens) {self.showHideLens(\"hide\");}\n\t\t\t\t\tif(self.options.tint) {\tself.showHideTint(\"hide\");}\n\t\t\t\t}   \n\t\t\t},\n\t\t\tsetPosition: function(e) {\n      \n\t\t\t\tif (typeof e == 'undefined') return;\n\t\t\t\tvar self = this;\n        \n        \t\tif(!self.options.zoomEnabled){return false;}\n\n\t\t\t\t//recaclc offset each time in case the image moves\n\t\t\t\t//this can be caused by other on page elements\n\t\t\t\tself.nzHeight = self.$elem.height();\n\t\t\t\tself.nzWidth = self.$elem.width();\n\t\t\t\tself.nzOffset = self.$elem.offset();\n\n\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {\n\t\t\t\t\tself.zoomTint.css({ top: 0});\n\t\t\t\t\tself.zoomTint.css({ left: 0});\n\t\t\t\t}\n\t\t\t\t//set responsive       \n\t\t\t\t//will checking if the image needs changing before running this code work faster?\n\t\t\t\tif(self.options.responsive && !self.options.scrollZoom){\n\t\t\t\t\tif(self.options.showLens){ \n\t\t\t\t\t\tif(self.nzHeight < self.options.zoomWindowWidth/self.widthRatio){\n\t\t\t\t\t\t\tlensHeight = self.nzHeight;              \n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tlensHeight = String((self.options.zoomWindowHeight/self.heightRatio))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(self.largeWidth < self.options.zoomWindowWidth){\n\t\t\t\t\t\t\tlensWidth = self.nzWidth;\n\t\t\t\t\t\t}       \n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tlensWidth =  (self.options.zoomWindowWidth/self.widthRatio);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.widthRatio = self.largeWidth / self.nzWidth;\n\t\t\t\t\t\tself.heightRatio = self.largeHeight / self.nzHeight;        \n\t\t\t\t\t\tif(self.options.zoomType != \"lens\") {\n\n\n\t\t\t\t\t\t\t//possibly dont need to keep recalcalculating\n\t\t\t\t\t\t\t//if the lens is heigher than the image, then set lens size to image size\n\t\t\t\t\t\t\tif(self.nzHeight < self.options.zoomWindowWidth/self.widthRatio){\n\t\t\t\t\t\t\t\tlensHeight = self.nzHeight;  \n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tlensHeight = String((self.options.zoomWindowHeight/self.heightRatio))\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(self.options.zoomWindowWidth < self.options.zoomWindowWidth){\n\t\t\t\t\t\t\t\tlensWidth = self.nzWidth;\n\t\t\t\t\t\t\t}       \n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tlensWidth =  (self.options.zoomWindowWidth/self.widthRatio);\n\t\t\t\t\t\t\t}            \n\n\t\t\t\t\t\t\tself.zoomLens.css('width', lensWidth);    \n\t\t\t\t\t\t\tself.zoomLens.css('height', lensHeight); \n\n\t\t\t\t\t\t\tif(self.options.tint){    \n\t\t\t\t\t\t\t\tself.zoomTintImage.css('width', self.nzWidth);    \n\t\t\t\t\t\t\t\tself.zoomTintImage.css('height', self.nzHeight); \n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}                     \n\t\t\t\t\t\tif(self.options.zoomType == \"lens\") {  \n\n\t\t\t\t\t\t\tself.zoomLens.css({ width: String(self.options.lensSize) + 'px', height: String(self.options.lensSize) + 'px' })      \n\n\n\t\t\t\t\t\t}        \n\t\t\t\t\t\t//end responsive image change\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//container fix\n\t\t\t\tself.zoomContainer.css({ top: self.nzOffset.top});\n\t\t\t\tself.zoomContainer.css({ left: self.nzOffset.left});\n\t\t\t\tself.mouseLeft = parseInt(e.pageX - self.nzOffset.left);\n\t\t\t\tself.mouseTop = parseInt(e.pageY - self.nzOffset.top);\n\t\t\t\t//calculate the Location of the Lens\n\n\t\t\t\t//calculate the bound regions - but only if zoom window\n\t\t\t\tif(self.options.zoomType == \"window\") {\n\t\t\t\t\tself.Etoppos = (self.mouseTop < (self.zoomLens.height()/2));\n\t\t\t\t\tself.Eboppos = (self.mouseTop > self.nzHeight - (self.zoomLens.height()/2)-(self.options.lensBorderSize*2));\n\t\t\t\t\tself.Eloppos = (self.mouseLeft < 0+((self.zoomLens.width()/2))); \n\t\t\t\t\tself.Eroppos = (self.mouseLeft > (self.nzWidth - (self.zoomLens.width()/2)-(self.options.lensBorderSize*2)));  \n\t\t\t\t}\n\t\t\t\t//calculate the bound regions - but only for inner zoom\n\t\t\t\tif(self.options.zoomType == \"inner\"){ \n\t\t\t\t\tself.Etoppos = (self.mouseTop < ((self.nzHeight/2)/self.heightRatio) );\n\t\t\t\t\tself.Eboppos = (self.mouseTop > (self.nzHeight - ((self.nzHeight/2)/self.heightRatio)));\n\t\t\t\t\tself.Eloppos = (self.mouseLeft < 0+(((self.nzWidth/2)/self.widthRatio)));\n\t\t\t\t\tself.Eroppos = (self.mouseLeft > (self.nzWidth - (self.nzWidth/2)/self.widthRatio-(self.options.lensBorderSize*2)));  \n\t\t\t\t}\n\n\t\t\t\t// if the mouse position of the slider is one of the outerbounds, then hide  window and lens\n\t\t\t\tif (self.mouseLeft <= 0 || self.mouseTop < 0 || self.mouseLeft > self.nzWidth || self.mouseTop > self.nzHeight ) {\t\t\t\t          \n\t\t\t\t\tself.setElements(\"hide\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//else continue with operations\n\t\t\t\telse {\n\n\n\t\t\t\t\t//lens options\n\t\t\t\t\tif(self.options.showLens) {\n\t\t\t\t\t\t//\t\tself.showHideLens(\"show\");\n\t\t\t\t\t\t//set background position of lens\n\t\t\t\t\t\tself.lensLeftPos = String(self.mouseLeft - self.zoomLens.width() / 2);\n\t\t\t\t\t\tself.lensTopPos = String(self.mouseTop - self.zoomLens.height() / 2);\n\n\n\t\t\t\t\t}\n\t\t\t\t\t//adjust the background position if the mouse is in one of the outer regions \n\n\t\t\t\t\t//Top region\n\t\t\t\t\tif(self.Etoppos){\n\t\t\t\t\t\tself.lensTopPos = 0;\n\t\t\t\t\t}\n\t\t\t\t\t//Left Region\n\t\t\t\t\tif(self.Eloppos){\n\t\t\t\t\t\tself.windowLeftPos = 0;\n\t\t\t\t\t\tself.lensLeftPos = 0;\n\t\t\t\t\t\tself.tintpos=0;\n\t\t\t\t\t}     \n\t\t\t\t\t//Set bottom and right region for window mode\n\t\t\t\t\tif(self.options.zoomType == \"window\") {\n\t\t\t\t\t\tif(self.Eboppos){\n\t\t\t\t\t\t\tself.lensTopPos = Math.max( (self.nzHeight)-self.zoomLens.height()-(self.options.lensBorderSize*2), 0 );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tif(self.Eroppos){\n\t\t\t\t\t\t\tself.lensLeftPos = (self.nzWidth-(self.zoomLens.width())-(self.options.lensBorderSize*2));\n\t\t\t\t\t\t}  \n\t\t\t\t\t}  \n\t\t\t\t\t//Set bottom and right region for inner mode\n\t\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\t\tif(self.Eboppos){\n\t\t\t\t\t\t\tself.lensTopPos = Math.max( ((self.nzHeight)-(self.options.lensBorderSize*2)), 0 );\n\t\t\t\t\t\t} \n\t\t\t\t\t\tif(self.Eroppos){\n\t\t\t\t\t\t\tself.lensLeftPos = (self.nzWidth-(self.nzWidth)-(self.options.lensBorderSize*2));\n\t\t\t\t\t\t}  \n\n\t\t\t\t\t}\n\t\t\t\t\t//if lens zoom\n\t\t\t\t\tif(self.options.zoomType == \"lens\") {  \n\t\t\t\t\t\tself.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomLens.width() / 2) * (-1));   \n\t\t\t\t\t\tself.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomLens.height() / 2) * (-1));\n\n\t\t\t\t\t\tself.zoomLens.css({ backgroundPosition: self.windowLeftPos + 'px ' + self.windowTopPos + 'px' });\n\n\t\t\t\t\t\tif(self.changeBgSize){  \n\n\t\t\t\t\t\t\tif(self.nzHeight>self.nzWidth){  \n\t\t\t\t\t\t\t\tif(self.options.zoomType == \"lens\"){       \n\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t\t}   \n\n\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{     \n\t\t\t\t\t\t\t\tif(self.options.zoomType == \"lens\"){       \n\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvaluewidth + 'px' });\n\t\t\t\t\t\t\t\t}   \n\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvaluewidth + 'px' });            \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.changeBgSize = false;\n\t\t\t\t\t\t}    \n\n\t\t\t\t\t\tself.setWindowPostition(e);  \n\t\t\t\t\t}\n\t\t\t\t\t//if tint zoom   \n\t\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {\n\t\t\t\t\t\tself.setTintPosition(e);\n\n\t\t\t\t\t}\n\t\t\t\t\t//set the css background position \n\t\t\t\t\tif(self.options.zoomType == \"window\") {\n\t\t\t\t\t\tself.setWindowPostition(e);   \n\t\t\t\t\t}\n\t\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\t\tself.setWindowPostition(e);   \n\t\t\t\t\t}\n\t\t\t\t\tif(self.options.showLens) {\n\n\t\t\t\t\t\tif(self.fullwidth && self.options.zoomType != \"lens\"){\n\t\t\t\t\t\t\tself.lensLeftPos = 0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.zoomLens.css({ left: self.lensLeftPos + 'px', top: self.lensTopPos + 'px' })  \n\t\t\t\t\t}\n\n\t\t\t\t} //end else\n\n\n\n\t\t\t},\n\t\t\tshowHideWindow: function(change) {\n\t\t\t\tvar self = this;              \n\t\t\t\tif(change == \"show\"){      \n\t\t\t\t\tif(!self.isWindowActive){\n\t\t\t\t\t\tif(self.options.zoomWindowFadeIn){\n\t\t\t\t\t\t\tself.zoomWindow.stop(true, true, false).fadeIn(self.options.zoomWindowFadeIn);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{self.zoomWindow.show();}\n\t\t\t\t\t\tself.isWindowActive = true;\n\t\t\t\t\t}            \n\t\t\t\t}\n\t\t\t\tif(change == \"hide\"){\n\t\t\t\t\tif(self.isWindowActive){\n\t\t\t\t\t\tif(self.options.zoomWindowFadeOut){\n\t\t\t\t\t\t\tself.zoomWindow.stop(true, true).fadeOut(self.options.zoomWindowFadeOut);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{self.zoomWindow.hide();}\n\t\t\t\t\t\tself.isWindowActive = false;        \n\t\t\t\t\t}      \n\t\t\t\t}\n\t\t\t},\n\t\t\tshowHideLens: function(change) {\n\t\t\t\tvar self = this;              \n\t\t\t\tif(change == \"show\"){      \n\t\t\t\t\tif(!self.isLensActive){\n\t\t\t\t\t\tif(self.options.lensFadeIn){\n\t\t\t\t\t\t\tself.zoomLens.stop(true, true, false).fadeIn(self.options.lensFadeIn);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{self.zoomLens.show();}\n\t\t\t\t\t\tself.isLensActive = true;\n\t\t\t\t\t}            \n\t\t\t\t}\n\t\t\t\tif(change == \"hide\"){\n\t\t\t\t\tif(self.isLensActive){\n\t\t\t\t\t\tif(self.options.lensFadeOut){\n\t\t\t\t\t\t\tself.zoomLens.stop(true, true).fadeOut(self.options.lensFadeOut);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{self.zoomLens.hide();}\n\t\t\t\t\t\tself.isLensActive = false;        \n\t\t\t\t\t}      \n\t\t\t\t}\n\t\t\t},\n\t\t\tshowHideTint: function(change) {\n\t\t\t\tvar self = this;              \n\t\t\t\tif(change == \"show\"){      \n\t\t\t\t\tif(!self.isTintActive){\n\n\t\t\t\t\t\tif(self.options.zoomTintFadeIn){\n\t\t\t\t\t\t\tself.zoomTint.css({opacity:self.options.tintOpacity}).animate().stop(true, true).fadeIn(\"slow\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tself.zoomTint.css({opacity:self.options.tintOpacity}).animate();\n\t\t\t\t\t\t\tself.zoomTint.show();\n\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.isTintActive = true;\n\t\t\t\t\t}            \n\t\t\t\t}\n\t\t\t\tif(change == \"hide\"){      \n\t\t\t\t\tif(self.isTintActive){ \n\n\t\t\t\t\t\tif(self.options.zoomTintFadeOut){\n\t\t\t\t\t\t\tself.zoomTint.stop(true, true).fadeOut(self.options.zoomTintFadeOut);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{self.zoomTint.hide();}\n\t\t\t\t\t\tself.isTintActive = false;        \n\t\t\t\t\t}      \n\t\t\t\t}\n\t\t\t},\n\t\t\tsetLensPostition: function( e ) {\n\n\n\t\t\t},\n\t\t\tsetWindowPostition: function( e ) {\n\t\t\t\t//return obj.slice( 0, count );\n\t\t\t\tvar self = this;\n\n\t\t\t\tif(!isNaN(self.options.zoomWindowPosition)){\n\n\t\t\t\t\tswitch (self.options.zoomWindowPosition) { \n\t\t\t\t\tcase 1: //done         \n\t\t\t\t\t\tself.windowOffsetTop = (self.options.zoomWindowOffety);//DONE - 1\n\t\t\t\t\t\tif(!$('body').hasClass('rtl')){\n\t\t\t\t\t\t\tself.windowOffsetLeft =(+self.nzWidth); //DONE 1, 2, 3, 4, 16\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.windowOffsetLeft =(-self.nzWidth); //DONE 1, 2, 3, 4, 16\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tif(self.options.zoomWindowHeight > self.nzHeight){ //positive margin\n\n\t\t\t\t\t\t\tself.windowOffsetTop = ((self.options.zoomWindowHeight/2)-(self.nzHeight/2))*(-1);\n\t\t\t\t\t\t\tself.windowOffsetLeft =(self.nzWidth); //DONE 1, 2, 3, 4, 16\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{ //negative margin\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3: //done        \n\t\t\t\t\t\tself.windowOffsetTop = (self.nzHeight - self.zoomWindow.height() - (self.options.borderSize*2)); //DONE 3,9\n\t\t\t\t\t\tself.windowOffsetLeft =(self.nzWidth); //DONE 1, 2, 3, 4, 16\n\t\t\t\t\t\tbreak;      \n\t\t\t\t\tcase 4: //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.nzHeight); //DONE - 4,5,6,7,8\n\t\t\t\t\t\tself.windowOffsetLeft =(self.nzWidth); //DONE 1, 2, 3, 4, 16\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5: //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.nzHeight); //DONE - 4,5,6,7,8\n\t\t\t\t\t\tself.windowOffsetLeft =(self.nzWidth-self.zoomWindow.width()-(self.options.borderSize*2)); //DONE - 5,15\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6: \n\t\t\t\t\t\tif(self.options.zoomWindowHeight > self.nzHeight){ //positive margin\n\t\t\t\t\t\t\tself.windowOffsetTop = (self.nzHeight);  //DONE - 4,5,6,7,8\n\n\t\t\t\t\t\t\tself.windowOffsetLeft =((self.options.zoomWindowWidth/2)-(self.nzWidth/2)+(self.options.borderSize*2))*(-1);  \n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{ //negative margin\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7: //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.nzHeight);  //DONE - 4,5,6,7,8\n\t\t\t\t\t\tself.windowOffsetLeft = 0; //DONE 7, 13\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8: //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.nzHeight); //DONE - 4,5,6,7,8\n\t\t\t\t\t\tself.windowOffsetLeft =(self.zoomWindow.width()+(self.options.borderSize*2) )* (-1);  //DONE 8,9,10,11,12\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:  //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.nzHeight - self.zoomWindow.height() - (self.options.borderSize*2)); //DONE 3,9\n\t\t\t\t\t\tself.windowOffsetLeft =(self.zoomWindow.width()+(self.options.borderSize*2) )* (-1);  //DONE 8,9,10,11,12\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10: \n\t\t\t\t\t\tif(self.options.zoomWindowHeight > self.nzHeight){ //positive margin\n\n\t\t\t\t\t\t\tself.windowOffsetTop = ((self.options.zoomWindowHeight/2)-(self.nzHeight/2))*(-1);\n\t\t\t\t\t\t\tself.windowOffsetLeft =(self.zoomWindow.width()+(self.options.borderSize*2) )* (-1);  //DONE 8,9,10,11,12\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{ //negative margin\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11: \n\t\t\t\t\t\tself.windowOffsetTop = (self.options.zoomWindowOffety);\n\t\t\t\t\t\tself.windowOffsetLeft =(self.zoomWindow.width()+(self.options.borderSize*2) )* (-1);  //DONE 8,9,10,11,12\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12: //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.zoomWindow.height()+(self.options.borderSize*2))*(-1); //DONE 12,13,14,15,16\n\t\t\t\t\t\tself.windowOffsetLeft =(self.zoomWindow.width()+(self.options.borderSize*2) )* (-1);  //DONE 8,9,10,11,12\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 13: //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.zoomWindow.height()+(self.options.borderSize*2))*(-1); //DONE 12,13,14,15,16\n\t\t\t\t\t\tself.windowOffsetLeft =(0); //DONE 7, 13\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 14: \n\t\t\t\t\t\tif(self.options.zoomWindowHeight > self.nzHeight){ //positive margin\n\t\t\t\t\t\t\tself.windowOffsetTop = (self.zoomWindow.height()+(self.options.borderSize*2))*(-1); //DONE 12,13,14,15,16\n\n\t\t\t\t\t\t\tself.windowOffsetLeft =((self.options.zoomWindowWidth/2)-(self.nzWidth/2)+(self.options.borderSize*2))*(-1);  \n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{ //negative margin\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 15://done   \n\t\t\t\t\t\tself.windowOffsetTop = (self.zoomWindow.height()+(self.options.borderSize*2))*(-1); //DONE 12,13,14,15,16\n\t\t\t\t\t\tself.windowOffsetLeft =(self.nzWidth-self.zoomWindow.width()-(self.options.borderSize*2)); //DONE - 5,15\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 16:  //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.zoomWindow.height()+(self.options.borderSize*2))*(-1); //DONE 12,13,14,15,16\n\t\t\t\t\t\tself.windowOffsetLeft =(self.nzWidth); //DONE 1, 2, 3, 4, 16\n\t\t\t\t\t\tbreak;            \n\t\t\t\t\tdefault: //done  \n\t\t\t\t\t\tself.windowOffsetTop = (self.options.zoomWindowOffety);//DONE - 1\n\t\t\t\t\tself.windowOffsetLeft =(self.nzWidth); //DONE 1, 2, 3, 4, 16\n\t\t\t\t\t} \n\t\t\t\t} //end isNAN\n\t\t\t\telse{\n\t\t\t\t\t//WE CAN POSITION IN A CLASS - ASSUME THAT ANY STRING PASSED IS\n\t\t\t\t\tself.externalContainer = $('#'+self.options.zoomWindowPosition);\n\t\t\t\t\tself.externalContainerWidth = self.externalContainer.width();\n\t\t\t\t\tself.externalContainerHeight = self.externalContainer.height();\n\t\t\t\t\tself.externalContainerOffset = self.externalContainer.offset();\n\n\t\t\t\t\tself.windowOffsetTop = self.externalContainerOffset.top;//DONE - 1\n\t\t\t\t\tself.windowOffsetLeft =self.externalContainerOffset.left; //DONE 1, 2, 3, 4, 16\n\n\t\t\t\t}\n\t\t\t\tself.isWindowSet = true;\n\t\t\t\tself.windowOffsetTop = self.windowOffsetTop + self.options.zoomWindowOffety;\n\t\t\t\tself.windowOffsetLeft = self.windowOffsetLeft + self.options.zoomWindowOffetx;\n\n\t\t\t\tself.zoomWindow.css({ top: self.windowOffsetTop});\n\t\t\t\tself.zoomWindow.css({ left: self.windowOffsetLeft});\n\n\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\tself.zoomWindow.css({ top: 0});\n\t\t\t\t\tself.zoomWindow.css({ left: 0});\n\n\t\t\t\t}   \n\n\n\t\t\t\tself.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * (-1));   \n\t\t\t\tself.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * (-1));\n\t\t\t\tif(self.Etoppos){self.windowTopPos = 0;}\n\t\t\t\tif(self.Eloppos){self.windowLeftPos = 0;}     \n\t\t\t\tif(self.Eboppos){self.windowTopPos = (self.largeHeight/self.currentZoomLevel-self.zoomWindow.height())*(-1);  } \n\t\t\t\tif(self.Eroppos){self.windowLeftPos = ((self.largeWidth/self.currentZoomLevel-self.zoomWindow.width())*(-1));}    \n\n\t\t\t\t//stops micro movements\n\t\t\t\tif(self.fullheight){\n\t\t\t\t\tself.windowTopPos = 0;\n\n\t\t\t\t}\n\t\t\t\tif(self.fullwidth){\n\t\t\t\t\tself.windowLeftPos = 0;\n\n\t\t\t\t}\n\t\t\t\t//set the css background position \n\n\n\t\t\t\tif(self.options.zoomType == \"window\" || self.options.zoomType == \"inner\") {\n\n\t\t\t\t\tif(self.zoomLock == 1){\n\t\t\t\t\t\t//overrides for images not zoomable\n\t\t\t\t\t\tif(self.widthRatio <= 1){\n\n\t\t\t\t\t\t\tself.windowLeftPos = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(self.heightRatio <= 1){ \n\t\t\t\t\t\t\tself.windowTopPos = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// adjust images less than the window height\n\n\t\t\t\t\tif(self.largeHeight < self.options.zoomWindowHeight){\n\n\t\t\t\t\t\tself.windowTopPos = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(self.largeWidth < self.options.zoomWindowWidth){\n\t\t\t\t\t\tself.windowLeftPos = 0;\n\t\t\t\t\t}       \n\n\t\t\t\t\t//set the zoomwindow background position\n\t\t\t\t\tif (self.options.easing){\n\n\t\t\t\t\t\t//     if(self.changeZoom){\n\t\t\t\t\t\t//           clearInterval(self.loop);\n\t\t\t\t\t\t//           self.changeZoom = false;\n\t\t\t\t\t\t//           self.loop = false;\n\n\t\t\t\t\t\t//            }\n\t\t\t\t\t\t//set the pos to 0 if not set\n\t\t\t\t\t\tif(!self.xp){self.xp = 0;}\n\t\t\t\t\t\tif(!self.yp){self.yp = 0;}  \n\t\t\t\t\t\t//if loop not already started, then run it \n\t\t\t\t\t\tif (!self.loop){           \n\t\t\t\t\t\t\tself.loop = setInterval(function(){                \n\t\t\t\t\t\t\t\t//using zeno's paradox    \n\n\t\t\t\t\t\t\t\tself.xp += (self.windowLeftPos  - self.xp) / self.options.easingAmount; \n\t\t\t\t\t\t\t\tself.yp += (self.windowTopPos  - self.yp) / self.options.easingAmount;\n\t\t\t\t\t\t\t\tif(self.scrollingLock){\n\n\n\t\t\t\t\t\t\t\t\tclearInterval(self.loop);\n\t\t\t\t\t\t\t\t\tself.xp = self.windowLeftPos;\n\t\t\t\t\t\t\t\t\tself.yp = self.windowTopPos            \n\n\t\t\t\t\t\t\t\t\tself.xp = ((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * (-1);\n\t\t\t\t\t\t\t\t\tself.yp = (((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * (-1));                         \n\n\t\t\t\t\t\t\t\t\tif(self.changeBgSize){    \n\t\t\t\t\t\t\t\t\t\tif(self.nzHeight>self.nzWidth){  \n\t\t\t\t\t\t\t\t\t\t\tif(self.options.zoomType == \"lens\"){      \n\t\t\t\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t\t\t\t\t}   \n\t\t\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse{   \n\t\t\t\t\t\t\t\t\t\t\tif(self.options.zoomType == \"lens\"){      \n\t\t\t\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t\t\t\t\t}            \n\t\t\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvaluewidth + 'px' });            \n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t/*\n             if(!self.bgxp){self.bgxp = self.largeWidth/self.newvalue;}\n\t\t\t\t\t\tif(!self.bgyp){self.bgyp = self.largeHeight/self.newvalue ;}  \n                 if (!self.bgloop){   \n                 \tself.bgloop = setInterval(function(){   \n\n                 self.bgxp += (self.largeWidth/self.newvalue  - self.bgxp) / self.options.easingAmount; \n\t\t\t\t\t\t\t\tself.bgyp += (self.largeHeight/self.newvalue  - self.bgyp) / self.options.easingAmount;\n\n           self.zoomWindow.css({ \"background-size\": self.bgxp + 'px ' + self.bgyp + 'px' });\n\n\n                  }, 16);\n\n                 }\n\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\t\tself.changeBgSize = false;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ backgroundPosition: self.windowLeftPos + 'px ' + self.windowTopPos + 'px' });\n\t\t\t\t\t\t\t\t\tself.scrollingLock = false;\n\t\t\t\t\t\t\t\t\tself.loop = false;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\tif(self.changeBgSize){    \n\t\t\t\t\t\t\t\t\t\tif(self.nzHeight>self.nzWidth){ \n\t\t\t\t\t\t\t\t\t\t\tif(self.options.zoomType == \"lens\"){      \n\t\t\t\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t\t\t\t\t}         \n\t\t\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse{                 \n\t\t\t\t\t\t\t\t\t\t\tif(self.options.zoomType != \"lens\"){     \n\t\t\t\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvaluewidth + 'px' });\n\t\t\t\t\t\t\t\t\t\t\t}      \n\t\t\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvaluewidth + 'px' });            \n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tself.changeBgSize = false;\n\t\t\t\t\t\t\t\t\t}                   \n\n\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ backgroundPosition: self.xp + 'px ' + self.yp + 'px' });\n\t\t\t\t\t\t\t\t}       \n\t\t\t\t\t\t\t}, 16);\n\t\t\t\t\t\t}\n\t\t\t\t\t}   \n\t\t\t\t\telse{    \n\t\t\t\t\t\tif(self.changeBgSize){  \n\t\t\t\t\t\t\tif(self.nzHeight>self.nzWidth){  \n\t\t\t\t\t\t\t\tif(self.options.zoomType == \"lens\"){      \n\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t\t} \n\n\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{     \n\t\t\t\t\t\t\t\tif(self.options.zoomType == \"lens\"){      \n\t\t\t\t\t\t\t\t\tself.zoomLens.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvaluewidth + 'px' });\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\tif((self.largeHeight/self.newvaluewidth) < self.options.zoomWindowHeight){ \n\n\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvaluewidth + 'px ' + self.largeHeight/self.newvaluewidth + 'px' });            \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\n\t\t\t\t\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth/self.newvalueheight + 'px ' + self.largeHeight/self.newvalueheight + 'px' });   \n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.changeBgSize = false;\n\t\t\t\t\t\t}     \n\n\t\t\t\t\t\tself.zoomWindow.css({ backgroundPosition: self.windowLeftPos + 'px ' + self.windowTopPos + 'px' });       \n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t},\n\t\t\tsetTintPosition: function(e){\n\t\t\t\tvar self = this;\n\t\t\t\tself.nzOffset = self.$elem.offset();\n\t\t\t\tself.tintpos = String(((e.pageX - self.nzOffset.left)-(self.zoomLens.width() / 2)) * (-1)); \n\t\t\t\tself.tintposy = String(((e.pageY - self.nzOffset.top) - self.zoomLens.height() / 2) * (-1));\t\n\t\t\t\tif(self.Etoppos){\n\t\t\t\t\tself.tintposy = 0;\n\t\t\t\t}\n\t\t\t\tif(self.Eloppos){\n\t\t\t\t\tself.tintpos=0;\n\t\t\t\t}     \n\t\t\t\tif(self.Eboppos){\n\t\t\t\t\tself.tintposy = (self.nzHeight-self.zoomLens.height()-(self.options.lensBorderSize*2))*(-1);\n\t\t\t\t} \n\t\t\t\tif(self.Eroppos){\n\t\t\t\t\tself.tintpos = ((self.nzWidth-self.zoomLens.width()-(self.options.lensBorderSize*2))*(-1));\n\t\t\t\t}    \n\t\t\t\tif(self.options.tint) {\n\t\t\t\t\t//stops micro movements\n\t\t\t\t\tif(self.fullheight){\n\t\t\t\t\t\tself.tintposy = 0;\n\n\t\t\t\t\t}\n\t\t\t\t\tif(self.fullwidth){ \n\t\t\t\t\t\tself.tintpos = 0;\n\n\t\t\t\t\t}   \n\t\t\t\t\tself.zoomTintImage.css({'left': self.tintpos+'px'});\n\t\t\t\t\tself.zoomTintImage.css({'top': self.tintposy+'px'});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tswaptheimage: function(smallimage, largeimage){\n\t\t\t\tvar self = this;\n\t\t\t\tvar newImg = new Image(); \n\n\t\t\t\tif(self.options.loadingIcon){\n\t\t\t\t\tself.spinner = $('<div style=\"background: url(\\''+self.options.loadingIcon+'\\') no-repeat center;height:'+self.nzHeight+'px;width:'+self.nzWidth+'px;z-index: 2000;position: absolute; background-position: center center;\"></div>');\n\t\t\t\t\tself.$elem.after(self.spinner);\n\t\t\t\t}\n\n\t\t\t\tself.options.onImageSwap(self.$elem);\n\n\t\t\t\tnewImg.onload = function() {\n\t\t\t\t\tself.largeWidth = newImg.width;\n\t\t\t\t\tself.largeHeight = newImg.height;\n\t\t\t\t\tself.zoomImage = largeimage;\n\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth + 'px ' + self.largeHeight + 'px' });\n\t\t\t\t\tself.zoomWindow.css({ \"background-size\": self.largeWidth + 'px ' + self.largeHeight + 'px' });\n\n\n\t\t\t\t\tself.swapAction(smallimage, largeimage);\n\t\t\t\t\treturn;              \n\t\t\t\t}          \n\t\t\t\tnewImg.src = largeimage; // this must be done AFTER setting onload\n\n\t\t\t},\n\t\t\tswapAction: function(smallimage, largeimage){\n\n\n\t\t\t\tvar self = this;    \n\n\t\t\t\tvar newImg2 = new Image(); \n\t\t\t\tnewImg2.onload = function() {\n\t\t\t\t\t//re-calculate values\n\t\t\t\t\tself.nzHeight = newImg2.height;\n\t\t\t\t\tself.nzWidth = newImg2.width;\n\t\t\t\t\tself.options.onImageSwapComplete(self.$elem);\n\n\t\t\t\t\tself.doneCallback();  \n\t\t\t\t\treturn;      \n\t\t\t\t}          \n\t\t\t\tnewImg2.src = smallimage; \n\n\t\t\t\t//reset the zoomlevel to that initially set in options\n\t\t\t\tself.currentZoomLevel = self.options.zoomLevel;\n\t\t\t\tself.options.maxZoomLevel = false;\n\n\t\t\t\t//swaps the main image\n\t\t\t\t//self.$elem.attr(\"src\",smallimage);\n\t\t\t\t//swaps the zoom image     \n\t\t\t\tif(self.options.zoomType == \"lens\") {\n\t\t\t\t\tself.zoomLens.css({ backgroundImage: \"url('\" + largeimage + \"')\" }); \n\t\t\t\t}\n\t\t\t\tif(self.options.zoomType == \"window\") {\n\t\t\t\t\tself.zoomWindow.css({ backgroundImage: \"url('\" + largeimage + \"')\" }); \n\t\t\t\t}\n\t\t\t\tif(self.options.zoomType == \"inner\") {\n\t\t\t\t\tself.zoomWindow.css({ backgroundImage: \"url('\" + largeimage + \"')\" }); \n\t\t\t\t} \n\n\n\n\t\t\t\tself.currentImage = largeimage;\n\n\t\t\t\tif(self.options.imageCrossfade){\n\t\t\t\t\tvar oldImg = self.$elem;\n\t\t\t\t\tvar newImg = oldImg.clone();         \n\t\t\t\t\tself.$elem.attr(\"src\",smallimage)\n\t\t\t\t\tself.$elem.after(newImg);\n\t\t\t\t\tnewImg.stop(true).fadeOut(self.options.imageCrossfade, function() {\n\t\t\t\t\t\t$(this).remove();         \n\t\t\t\t\t});\n\n\t\t\t\t\t//       \t\t\t\tif(self.options.zoomType == \"inner\"){\n\t\t\t\t\t//remove any attributes on the cloned image so we can resize later\n\t\t\t\t\tself.$elem.width(\"auto\").removeAttr(\"width\");\n\t\t\t\t\tself.$elem.height(\"auto\").removeAttr(\"height\");\n\t\t\t\t\t//   }\n\n\t\t\t\t\toldImg.fadeIn(self.options.imageCrossfade);\n\n\t\t\t\t\tif(self.options.tint && self.options.zoomType != \"inner\") {\n\n\t\t\t\t\t\tvar oldImgTint = self.zoomTintImage;\n\t\t\t\t\t\tvar newImgTint = oldImgTint.clone();         \n\t\t\t\t\t\tself.zoomTintImage.attr(\"src\",largeimage)\n\t\t\t\t\t\tself.zoomTintImage.after(newImgTint);\n\t\t\t\t\t\tnewImgTint.stop(true).fadeOut(self.options.imageCrossfade, function() {\n\t\t\t\t\t\t\t$(this).remove();         \n\t\t\t\t\t\t});\n\n\n\n\t\t\t\t\t\toldImgTint.fadeIn(self.options.imageCrossfade);\n\n\n\t\t\t\t\t\t//self.zoomTintImage.attr(\"width\",elem.data(\"image\"));\n\n\t\t\t\t\t\t//resize the tint window\n\t\t\t\t\t\tself.zoomTint.css({ height: self.$elem.height()});\n\t\t\t\t\t\tself.zoomTint.css({ width: self.$elem.width()});\n\t\t\t\t\t}    \n\n\t\t\t\t\tself.zoomContainer.css(\"height\", self.$elem.height());\n\t\t\t\t\tself.zoomContainer.css(\"width\", self.$elem.width());\n\n\t\t\t\t\tif(self.options.zoomType == \"inner\"){ \n\t\t\t\t\t\tif(!self.options.constrainType){\n\t\t\t\t\t\t\tself.zoomWrap.parent().css(\"height\", self.$elem.height());\n\t\t\t\t\t\t\tself.zoomWrap.parent().css(\"width\", self.$elem.width());\n\n\t\t\t\t\t\t\tself.zoomWindow.css(\"height\", self.$elem.height());\n\t\t\t\t\t\t\tself.zoomWindow.css(\"width\", self.$elem.width());\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\n\t\t\t\t\tif(self.options.imageCrossfade){  \n\t\t\t\t\t\tself.zoomWrap.css(\"height\", self.$elem.height());\n\t\t\t\t\t\tself.zoomWrap.css(\"width\", self.$elem.width());\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tself.$elem.attr(\"src\",smallimage); \n\t\t\t\t\tif(self.options.tint) {\n\t\t\t\t\t\tself.zoomTintImage.attr(\"src\",largeimage);\n\t\t\t\t\t\t//self.zoomTintImage.attr(\"width\",elem.data(\"image\"));\n\t\t\t\t\t\tself.zoomTintImage.attr(\"height\",self.$elem.height());\n\t\t\t\t\t\t//self.zoomTintImage.attr('src') = elem.data(\"image\");\n\t\t\t\t\t\tself.zoomTintImage.css({ height: self.$elem.height()}); \n\t\t\t\t\t\tself.zoomTint.css({ height: self.$elem.height()});\n\n\t\t\t\t\t}\n\t\t\t\t\tself.zoomContainer.css(\"height\", self.$elem.height());\n\t\t\t\t\tself.zoomContainer.css(\"width\", self.$elem.width());\n\n\t\t\t\t\tif(self.options.imageCrossfade){  \n\t\t\t\t\t\tself.zoomWrap.css(\"height\", self.$elem.height());\n\t\t\t\t\t\tself.zoomWrap.css(\"width\", self.$elem.width());\n\t\t\t\t\t} \n\t\t\t\t}              \n\t\t\t\tif(self.options.constrainType){     \n\n\t\t\t\t\t//This will contrain the image proportions\n\t\t\t\t\tif(self.options.constrainType == \"height\"){ \n\n\t\t\t\t\t\tself.zoomContainer.css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\tself.zoomContainer.css(\"width\", \"auto\");\n\n\t\t\t\t\t\tif(self.options.imageCrossfade){  \n\t\t\t\t\t\t\tself.zoomWrap.css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.zoomWrap.css(\"width\", \"auto\"); \n\t\t\t\t\t\t\tself.constwidth = self.zoomWrap.width();\n\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{                  \n\t\t\t\t\t\t\tself.$elem.css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.$elem.css(\"width\", \"auto\");\n\t\t\t\t\t\t\tself.constwidth = self.$elem.width();\n\t\t\t\t\t\t} \n\n\t\t\t\t\t\tif(self.options.zoomType == \"inner\"){\n\n\t\t\t\t\t\t\tself.zoomWrap.parent().css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.zoomWrap.parent().css(\"width\", self.constwidth);   \n\t\t\t\t\t\t\tself.zoomWindow.css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.zoomWindow.css(\"width\", self.constwidth);    \n\t\t\t\t\t\t}        \n\t\t\t\t\t\tif(self.options.tint){\n\t\t\t\t\t\t\tself.tintContainer.css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.tintContainer.css(\"width\", self.constwidth);\n\t\t\t\t\t\t\tself.zoomTint.css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.zoomTint.css(\"width\", self.constwidth);\n\t\t\t\t\t\t\tself.zoomTintImage.css(\"height\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.zoomTintImage.css(\"width\", self.constwidth); \n\t\t\t\t\t\t} \n\n\t\t\t\t\t}\n\t\t\t\t\tif(self.options.constrainType == \"width\"){       \n\t\t\t\t\t\tself.zoomContainer.css(\"height\", \"auto\");\n\t\t\t\t\t\tself.zoomContainer.css(\"width\", self.options.constrainSize);\n\n\t\t\t\t\t\tif(self.options.imageCrossfade){\n\t\t\t\t\t\t\tself.zoomWrap.css(\"height\", \"auto\");\n\t\t\t\t\t\t\tself.zoomWrap.css(\"width\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.constheight = self.zoomWrap.height();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{            \n\t\t\t\t\t\t\tself.$elem.css(\"height\", \"auto\");\n\t\t\t\t\t\t\tself.$elem.css(\"width\", self.options.constrainSize); \n\t\t\t\t\t\t\tself.constheight = self.$elem.height();              \n\t\t\t\t\t\t} \n\t\t\t\t\t\tif(self.options.zoomType == \"inner\"){\n\t\t\t\t\t\t\tself.zoomWrap.parent().css(\"height\", self.constheight);\n\t\t\t\t\t\t\tself.zoomWrap.parent().css(\"width\", self.options.constrainSize);   \n\t\t\t\t\t\t\tself.zoomWindow.css(\"height\", self.constheight);\n\t\t\t\t\t\t\tself.zoomWindow.css(\"width\", self.options.constrainSize);    \n\t\t\t\t\t\t} \n\t\t\t\t\t\tif(self.options.tint){\n\t\t\t\t\t\t\tself.tintContainer.css(\"height\", self.constheight);\n\t\t\t\t\t\t\tself.tintContainer.css(\"width\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.zoomTint.css(\"height\", self.constheight);\n\t\t\t\t\t\t\tself.zoomTint.css(\"width\", self.options.constrainSize);\n\t\t\t\t\t\t\tself.zoomTintImage.css(\"height\", self.constheight);\n\t\t\t\t\t\t\tself.zoomTintImage.css(\"width\", self.options.constrainSize); \n\t\t\t\t\t\t}   \n\n\t\t\t\t\t}        \n\n\n\t\t\t\t}\n\n\t\t\t},\n\t\t\tdoneCallback: function(){\n\n\t\t\t\tvar self = this;\n\t\t\t\tif(self.options.loadingIcon){\n\t\t\t\t\tself.spinner.hide();     \n\t\t\t\t}   \n\n\t\t\t\tself.nzOffset = self.$elem.offset();\n\t\t\t\tself.nzWidth = self.$elem.width();\n\t\t\t\tself.nzHeight = self.$elem.height();\n\n\t\t\t\t// reset the zoomlevel back to default\n\t\t\t\tself.currentZoomLevel = self.options.zoomLevel;\n\n\t\t\t\t//ratio of the large to small image\n\t\t\t\tself.widthRatio = self.largeWidth / self.nzWidth;\n\t\t\t\tself.heightRatio = self.largeHeight / self.nzHeight; \n\n\t\t\t\t//NEED TO ADD THE LENS SIZE FOR ROUND\n\t\t\t\t// adjust images less than the window height\n\t\t\t\tif(self.options.zoomType == \"window\") {\n\n\t\t\t\t\tif(self.nzHeight < self.options.zoomWindowWidth/self.widthRatio){\n\t\t\t\t\t\tlensHeight = self.nzHeight;  \n\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlensHeight = String((self.options.zoomWindowHeight/self.heightRatio))\n\t\t\t\t\t}\n\n\t\t\t\t\tif(self.options.zoomWindowWidth < self.options.zoomWindowWidth){\n\t\t\t\t\t\tlensWidth = self.nzWidth;\n\t\t\t\t\t}       \n\t\t\t\t\telse{\n\t\t\t\t\t\tlensWidth =  (self.options.zoomWindowWidth/self.widthRatio);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif(self.zoomLens){\n\n\t\t\t\t\t\tself.zoomLens.css('width', lensWidth);    \n\t\t\t\t\t\tself.zoomLens.css('height', lensHeight); \n\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetCurrentImage: function(){\n\t\t\t\tvar self = this;  \n\t\t\t\treturn self.zoomImage; \n\t\t\t}, \n\t\t\tgetGalleryList: function(){\n\t\t\t\tvar self = this;   \n\t\t\t\t//loop through the gallery options and set them in list for fancybox\n\t\t\t\tself.gallerylist = [];\n\t\t\t\tif (self.options.gallery){ \n\n\n\t\t\t\t\t$('#'+self.options.gallery + ' a').each(function() {\n\n\t\t\t\t\t\tvar img_src = '';\n\t\t\t\t\t\tif($(this).data(\"zoom-image\")){\n\t\t\t\t\t\t\timg_src = $(this).data(\"zoom-image\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if($(this).data(\"image\")){\n\t\t\t\t\t\t\timg_src = $(this).data(\"image\");\n\t\t\t\t\t\t}\t\t\t\n\t\t\t\t\t\t//put the current image at the start\n\t\t\t\t\t\tif(img_src == self.zoomImage){\n\t\t\t\t\t\t\tself.gallerylist.unshift({\n\t\t\t\t\t\t\t\thref: ''+img_src+'',\n\t\t\t\t\t\t\t\ttitle: $(this).find('img').attr(\"title\")\n\t\t\t\t\t\t\t});\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tself.gallerylist.push({\n\t\t\t\t\t\t\t\thref: ''+img_src+'',\n\t\t\t\t\t\t\t\ttitle: $(this).find('img').attr(\"title\")\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t});\n\t\t\t\t}                                                       \n\t\t\t\t//if no gallery - return current image\n\t\t\t\telse{\n\t\t\t\t\tself.gallerylist.push({\n\t\t\t\t\t\thref: ''+self.zoomImage+'',\n\t\t\t\t\t\ttitle: $(this).find('img').attr(\"title\")\n\t\t\t\t\t}); \n\t\t\t\t}\n\t\t\t\treturn self.gallerylist;\n\n\t\t\t},\n\t\t\tchangeZoomLevel: function(value){\n\t\t\t\tvar self = this;   \n\n\t\t\t\t//flag a zoom, so can adjust the easing during setPosition     \n\t\t\t\tself.scrollingLock = true;   \n\n\t\t\t\t//round to two decimal places\n\t\t\t\tself.newvalue = parseFloat(value).toFixed(2);\n\t\t\t\tnewvalue = parseFloat(value).toFixed(2);\n\n\n\n\n\t\t\t\t//maxwidth & Maxheight of the image\n\t\t\t\tmaxheightnewvalue = self.largeHeight/((self.options.zoomWindowHeight / self.nzHeight) * self.nzHeight);     \n\t\t\t\tmaxwidthtnewvalue = self.largeWidth/((self.options.zoomWindowWidth / self.nzWidth) * self.nzWidth);   \t\n\n\n\n\n\t\t\t\t//calculate new heightratio\n\t\t\t\tif(self.options.zoomType != \"inner\")\n\t\t\t\t{\n\t\t\t\t\tif(maxheightnewvalue <= newvalue){\n\t\t\t\t\t\tself.heightRatio = (self.largeHeight/maxheightnewvalue) / self.nzHeight;\n\t\t\t\t\t\tself.newvalueheight = maxheightnewvalue;\n\t\t\t\t\t\tself.fullheight = true;\n\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tself.heightRatio = (self.largeHeight/newvalue) / self.nzHeight; \n\t\t\t\t\t\tself.newvalueheight = newvalue;\n\t\t\t\t\t\tself.fullheight = false;\n\n\t\t\t\t\t}\n\n\n//\t\t\t\t\tcalculate new width ratio\n\n\t\t\t\t\tif(maxwidthtnewvalue <= newvalue){\n\t\t\t\t\t\tself.widthRatio = (self.largeWidth/maxwidthtnewvalue) / self.nzWidth;\n\t\t\t\t\t\tself.newvaluewidth = maxwidthtnewvalue;\n\t\t\t\t\t\tself.fullwidth = true;\n\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tself.widthRatio = (self.largeWidth/newvalue) / self.nzWidth; \n\t\t\t\t\t\tself.newvaluewidth = newvalue;\n\t\t\t\t\t\tself.fullwidth = false;\n\n\t\t\t\t\t}\n\t\t\t\t\tif(self.options.zoomType == \"lens\"){\n\t\t\t\t\t\tif(maxheightnewvalue <= newvalue){\n\t\t\t\t\t\t\tself.fullwidth = true;\n\t\t\t\t\t\t\tself.newvaluewidth = maxheightnewvalue;\n\n\t\t\t\t\t\t} else{\n\t\t\t\t\t\t\tself.widthRatio = (self.largeWidth/newvalue) / self.nzWidth; \n\t\t\t\t\t\t\tself.newvaluewidth = newvalue;\n\n\t\t\t\t\t\t\tself.fullwidth = false;\n\t\t\t\t\t\t}}\n\t\t\t\t}\n\n\n\n\t\t\t\tif(self.options.zoomType == \"inner\")\n\t\t\t\t{\n\t\t\t\t\tmaxheightnewvalue = parseFloat(self.largeHeight/self.nzHeight).toFixed(2);     \n\t\t\t\t\tmaxwidthtnewvalue = parseFloat(self.largeWidth/self.nzWidth).toFixed(2);      \n\t\t\t\t\tif(newvalue > maxheightnewvalue){\n\t\t\t\t\t\tnewvalue = maxheightnewvalue;\n\t\t\t\t\t}\n\t\t\t\t\tif(newvalue > maxwidthtnewvalue){\n\t\t\t\t\t\tnewvalue = maxwidthtnewvalue;\n\t\t\t\t\t}      \n\n\n\t\t\t\t\tif(maxheightnewvalue <= newvalue){\n\n\n\t\t\t\t\t\tself.heightRatio = (self.largeHeight/newvalue) / self.nzHeight; \n\t\t\t\t\t\tif(newvalue > maxheightnewvalue){\n\t\t\t\t\t\t\tself.newvalueheight = maxheightnewvalue;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tself.newvalueheight = newvalue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.fullheight = true;\n\n\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\n\n\n\t\t\t\t\t\tself.heightRatio = (self.largeHeight/newvalue) / self.nzHeight; \n\n\t\t\t\t\t\tif(newvalue > maxheightnewvalue){\n\n\t\t\t\t\t\t\tself.newvalueheight = maxheightnewvalue;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tself.newvalueheight = newvalue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.fullheight = false;\n\t\t\t\t\t}\n\n\n\n\n\t\t\t\t\tif(maxwidthtnewvalue <= newvalue){   \n\n\t\t\t\t\t\tself.widthRatio = (self.largeWidth/newvalue) / self.nzWidth; \n\t\t\t\t\t\tif(newvalue > maxwidthtnewvalue){\n\n\t\t\t\t\t\t\tself.newvaluewidth = maxwidthtnewvalue;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tself.newvaluewidth = newvalue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.fullwidth = true;\n\n\n\t\t\t\t\t}\n\t\t\t\t\telse{  \n\n\t\t\t\t\t\tself.widthRatio = (self.largeWidth/newvalue) / self.nzWidth; \n\t\t\t\t\t\tself.newvaluewidth = newvalue;\n\t\t\t\t\t\tself.fullwidth = false;\n\t\t\t\t\t}        \n\n\n\t\t\t\t} //end inner\n\t\t\t\tscrcontinue = false;\n\n\t\t\t\tif(self.options.zoomType == \"inner\"){\n\n\t\t\t\t\tif(self.nzWidth >= self.nzHeight){\n\t\t\t\t\t\tif( self.newvaluewidth <= maxwidthtnewvalue){\n\t\t\t\t\t\t\tscrcontinue = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\n\t\t\t\t\t\t\tscrcontinue = false;\n\t\t\t\t\t\t\tself.fullheight = true;\n\t\t\t\t\t\t\tself.fullwidth = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(self.nzHeight > self.nzWidth){     \n\t\t\t\t\t\tif( self.newvaluewidth <= maxwidthtnewvalue){\n\t\t\t\t\t\t\tscrcontinue = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tscrcontinue = false;  \n\n\t\t\t\t\t\t\tself.fullheight = true;\n\t\t\t\t\t\t\tself.fullwidth = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(self.options.zoomType != \"inner\"){\n\t\t\t\t\tscrcontinue = true;\n\t\t\t\t}\n\n\t\t\t\tif(scrcontinue){\n\n\n\n\t\t\t\t\tself.zoomLock = 0;\n\t\t\t\t\tself.changeZoom = true;\n\n\t\t\t\t\t//if lens height is less than image height\n\n\n\t\t\t\t\tif(((self.options.zoomWindowHeight)/self.heightRatio) <= self.nzHeight){\n\n\n\t\t\t\t\t\tself.currentZoomLevel = self.newvalueheight; \n\t\t\t\t\t\tif(self.options.zoomType != \"lens\" && self.options.zoomType != \"inner\") {\n\t\t\t\t\t\t\tself.changeBgSize = true;\n\n\t\t\t\t\t\t\tself.zoomLens.css({height: String((self.options.zoomWindowHeight)/self.heightRatio) + 'px' }) \n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(self.options.zoomType == \"lens\" || self.options.zoomType == \"inner\") {  \n\t\t\t\t\t\t\tself.changeBgSize = true;  \n\t\t\t\t\t\t}\t\n\n\n\t\t\t\t\t} \n\n\n\n\n\t\t\t\t\tif((self.options.zoomWindowWidth/self.widthRatio) <= self.nzWidth){\n\n\n\n\t\t\t\t\t\tif(self.options.zoomType != \"inner\"){\n\t\t\t\t\t\t\tif(self.newvaluewidth > self.newvalueheight)   {\n\t\t\t\t\t\t\t\tself.currentZoomLevel = self.newvaluewidth;                 \n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(self.options.zoomType != \"lens\" && self.options.zoomType != \"inner\") {\n\t\t\t\t\t\t\tself.changeBgSize = true;\n\n\t\t\t\t\t\t\tself.zoomLens.css({width: String((self.options.zoomWindowWidth)/self.widthRatio) + 'px' })\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(self.options.zoomType == \"lens\" || self.options.zoomType == \"inner\") {  \n\t\t\t\t\t\t\tself.changeBgSize = true;\n\t\t\t\t\t\t}\t\n\n\t\t\t\t\t}\n\t\t\t\t\tif(self.options.zoomType == \"inner\"){\n\t\t\t\t\t\tself.changeBgSize = true;  \n\n\t\t\t\t\t\tif(self.nzWidth > self.nzHeight){\n\t\t\t\t\t\t\tself.currentZoomLevel = self.newvaluewidth;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(self.nzHeight > self.nzWidth){\n\t\t\t\t\t\t\tself.currentZoomLevel = self.newvaluewidth;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}      //under\n\n\t\t\t\t//sets the boundry change, called in setWindowPos\n\t\t\t\tself.setPosition(self.currentLoc);\n\t\t\t\t//\n\t\t\t},\n\t\t\tcloseAll: function(){\n\t\t\t\tif(self.zoomWindow){self.zoomWindow.hide();}\n\t\t\t\tif(self.zoomLens){self.zoomLens.hide();}\n\t\t\t\tif(self.zoomTint){self.zoomTint.hide();}\n\t\t\t},\n\t\t\tchangeState: function(value){\n      \tvar self = this;\n\t\t\t\tif(value == 'enable'){self.options.zoomEnabled = true;}\n\t\t\t\tif(value == 'disable'){self.options.zoomEnabled = false;}\n\n\t\t\t}\n\n\t};\n\n\n\n\n\t$.fn.elevateZoom = function( options ) {\n\t\treturn this.each(function() {\n\t\t\tvar elevate = Object.create( ElevateZoom );\n\n\t\t\televate.init( options, this );\n\n\t\t\t$.data( this, 'elevateZoom', elevate );\n\n\t\t});\n\t};\n\n\t$.fn.elevateZoom.options = {\n\t\t\tzoomActivation: \"hover\", // Can also be click (PLACEHOLDER FOR NEXT VERSION)\n      zoomEnabled: true, //false disables zoomwindow from showing\n\t\t\tpreloading: 1, //by default, load all the images, if 0, then only load images after activated (PLACEHOLDER FOR NEXT VERSION)\n\t\t\tzoomLevel: 1, //default zoom level of image\n\t\t\tscrollZoom: false, //allow zoom on mousewheel, true to activate\n\t\t\tscrollZoomIncrement: 0.1,  //steps of the scrollzoom\n\t\t\tminZoomLevel: false,\n\t\t\tmaxZoomLevel: false,\n\t\t\teasing: false,\n\t\t\teasingAmount: 12,\n\t\t\tlensSize: 200,\n\t\t\tzoomWindowWidth: 400,\n\t\t\tzoomWindowHeight: 400,\n\t\t\tzoomWindowOffetx: 0,\n\t\t\tzoomWindowOffety: 0,\n\t\t\tzoomWindowPosition: 1,\n\t\t\tzoomWindowBgColour: \"#fff\",\n\t\t\tlensFadeIn: false,\n\t\t\tlensFadeOut: false,\n\t\t\tdebug: false,\n\t\t\tzoomWindowFadeIn: false,\n\t\t\tzoomWindowFadeOut: false,\n\t\t\tzoomWindowAlwaysShow: false,\n\t\t\tzoomTintFadeIn: false,\n\t\t\tzoomTintFadeOut: false,\n\t\t\tborderSize: 4,\n\t\t\tshowLens: true,\n\t\t\tborderColour: \"#888\",\n\t\t\tlensBorderSize: 1,\n\t\t\tlensBorderColour: \"#000\",\n\t\t\tlensShape: \"square\", //can be \"round\"\n\t\t\tzoomType: \"window\", //window is default,  also \"lens\" available -\n\t\t\tcontainLensZoom: false,\n\t\t\tlensColour: \"white\", //colour of the lens background\n\t\t\tlensOpacity: 0.4, //opacity of the lens\n\t\t\tlenszoom: false,\n\t\t\ttint: false, //enable the tinting\n\t\t\ttintColour: \"#333\", //default tint color, can be anything, red, #ccc, rgb(0,0,0)\n\t\t\ttintOpacity: 0.4, //opacity of the tint\n\t\t\tgallery: false,\n\t\t\tgalleryActiveClass: \"zoomGalleryActive\",\n\t\t\timageCrossfade: false,\n\t\t\tconstrainType: false,  //width or height\n\t\t\tconstrainSize: false,  //in pixels the dimensions you want to constrain on\n\t\t\tloadingIcon: false, //http://www.example.com/spinner.gif\n\t\t\tcursor:\"default\", // user should set to what they want the cursor as, if they have set a click function\n\t\t\tresponsive:true,\n\t\t\tonComplete: $.noop,\n\t\t\tonZoomedImageLoaded: function() {},\n\t\t\tonImageSwap: $.noop,\n\t\t\tonImageSwapComplete: $.noop\n\t};\n\n})( jQuery, window, document );"}
}});
